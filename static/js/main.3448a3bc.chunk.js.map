{"version":3,"sources":["img/reddit.svg","img/paypal.svg","img/github-icon.svg","img/facebook.svg","img/arrow.svg","styles/randomBg.js","styles/ModalStyle.js","Modals/ArtifactModal.js","component/Artifact.js","Modals/SetModal.js","component/Set.js","Modals/ScreenshotModal.js","Modals/HeaderModal.js","Modals/VersionModal.js","Versions/Versions.js","Modals/ModalsComponents/ButtonsModalComponent.js","Modals/SettingsModal.js","Modals/HowToUseContent/BuildersInfo.js","Modals/HowToUseContent/MiscInfo.js","Modals/HowToUseContent/SettingsInfo.js","Modals/HowToUseContent/ShareInfo.js","Modals/HowToUseModal.js","component/NavBar.js","component/ArtsBox.js","component/StatsSummaryAndArtsBox.js","component/LoadingScreen.js","optimiser/Optimiser.js","sorting/SortingSets.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","randomNumber","Math","floor","random","document","getElementById","style","background","baseStyle","overlay","zIndex","overflow","content","position","top","left","right","bottom","transform","color","height","maxHeight","width","padding","backgroundSize","backgroundRepeat","backgroundAttachment","customStyles","maxWidth","marginRight","ArtifactModal","Component","render","isOpen","onRequestClose","this","props","handler","artifact","className","artifact_name","art_level","src","artifact_img","alt","artifact_number","bonus1","race1","bonus2","race2","Artifact","constructor","super","closeArtStats","setState","showArtStats","state","bind","onClick","SetModal","showArts","art","key","artNumberToShow","setDefaultValue","value","filterBonuses","set","index","Object","keys","map","match","getRace","replace","bonusValue","filter","bonus","setRows","setArtsNumber","bonuses","bonusName","rowColor","bonusStep","rowSpan","bonusArray","indexArray","cap","length","fillMissingData","i","push","fillArray","createTable","bonusValues","artifacts","UNSAFE_componentWillMount","sets","artifact1","artifact2","artifact3","artifact4","artifact5","artifact6","defaultSet","set_name","set_arts_number","Set","closeSetStats","showSetStats","selectedSet","regex","wholeSetForModalStats","set_tech_name","ScreenshotModal","canvas","canvasMobile","Modal","setAppElement","HeaderModal","logoUrl","url","logo","isMobile","testFBApp","href","target","rel","redditLink","reddit","FBLink","facebook","github","paypal","VersionModal","versionMapping","v","lastIndex","number","title","date","versions","point1","point2","point3","point4","point5","point6","point7","point8","point9","setButtons","arrayLength","selectedTab","round","SettingsModal","tabs","optimiser","tab","tabsLength","setsTypes","bonusTypes","totalArtsPerSet","enhancementMode","enhancementLevels","setsLevels","setsSorting","AutomaticBuilderInfo","ManualBuilderInfo","MiscInfo","FiltersInfo","EnhancementsInfo","SetsLevelsInfo","SortingInfo","ShareInfo","HowToUseModal","infoTabs","selectedInfo","buildersTabs","selectedBuilder","settingsTabs","selectedSetting","infoTabsLength","buildersTabsLength","settingsTabsLength","showLastPatchNote","localStorage","getItem","JSON","parse","NavBar","setItem","closeInfoModal","showInfoModal","closeVersionModal","versionModal","dontShowUntillNextUpdate","closeSettingsModal","settingsModal","closeHowToUse","howToUse","now","Date","valueOf","setTimeout","window","location","navigator","maxTouchPoints","fbButtonStyle","border","display","FBIFrame","scrolling","frameBorder","connected","swapManualToAutomaticBuilder","triggerScreenshot","setFiltering","listLength","resetFilters","resetList","aria-label","name","id","type","placeholder","onChange","searchBySetName","autoComplete","ArtsBox","triggerBuild","e","keyCode","which","click","getOptimisedResults","resultLength","solutions","getArrayResult","checked","optimisedResultSelectedIndex","htmlFor","totalArts","gameSpeed","medalsBonus","optimiserNbArts","defaultValue","wantedArts","max","min","onKeyUp","optimiserMaxGS","maxGS","step","startBuild","setsData","StatsSummaryAndArtsBox","fullStatsMobile","offline","listContent","totalNumberOfArts","gameSpeedBonuses","bonusMedals","selectedList","arrow","marginTop","LoadingScreen","calculateMedalsFromEnhancement","elvl","calculateGSFromEnhancement","bonusGS","artLevel","trans","setType","eightStarsSetIsAirship","GSArrays","getGS","T0","T1","T2","T3","knapsack","maxArts","minMedalsPerSet","findBonus","excludedFromOptimiser","artLevels","sixStarsLevel","sevenStarsLevel","eightStarsLevel","nineStarsLevel","getSolution","row","nbArts","memo","NO_SOLUTION","col","lastItem","remaining","lastSolution","lastSubSolution","lastItemName","filteredSets","lastGSValue","lastMedalsValue","lastItemMedals","calculatedBonusMedals","newMaxArts","newGSValue","calculatedBonusGS","newMedalsValue","_lastSets","slice","getLastOfEach","memoResults","memoArray","sort","r1","r2","unifiedArray","setArray","setLevel","setName","indexOf","objectStyle","bonusGSValue","bonusMedalsValue","avgGSByNBArts","fullSet","set_total_arts_number","enhance_level","set1","set2","avgGS","filterSets","results","medals","stringify","filteredResults","seen","indexSwaps","getMedals","artsPerSetSort","data","swaps","a","b","alphabeticalSort","GSAmountSort","GSa","GSb","MedalsAmountSort","medalsA","medalsB","App","getDataFromLocalStorage","enhanceLevel","defaultData","setTypes","loading","checkOfflineAndLocalStorage","message","sortingASCorDESC","btnValue","method","sortedBy","sortingMethod","sortingButtons","defaultChecked","setsSortingButtons","boxes","sorts","resetSummaryState","querySelectorAll","forEach","input","handleList","event","status","globalArray","eventSetName","isInList","some","setNamesArray","isNaN","parseInt","changeSetEnhanceLevel","oldSet","array","splice","array2","array3","array4","findBonusMedalsMethod","findBonusGSMethod","prevState","handleOptimisedList","sum","toString","call","total","Number","hasOwnProperty","test","valueKey","getSelection","findGsBonus","findMedalBonus","setTechName","html2canvas","querySelector","then","showScreenModal","toDataURL","showIfMatch","toLowerCase","techName","searchBySetType","filterByBonusType","matchTotalArtsNumber","filterByTotalArtsNumber","filterSetsForStatsModal","setsArray","getSets","t0Array","t1Array","t2Array","t3Array","artsNumber","enhancementButtons","elvls","x","includes","adaptElvl","readOnly","getOptimizedSets","artsLevelsOptimized","sixStarsSets","sixStarsSetsOptimized","sevenStarsSets","sevenStarsSetsOptimized","eightStarsSets","eightStarsSetsOptimized","nineStarsSets","nineStarsSetsOptimized","testGSValue","testMedalsValue","isExcluded","getSetsTypes","getBonusTypes","bonusType","optimiserSetSetsLevelsFilter","eValueSplited","split","setTier","optimiserSixStarsLevel","optimiserSevenStarsLevel","optimiserEightStarsLevel","optimiserNineStarsLevel","getSetLevels","setLevelBoxes","setSetsLevel","newLine","artsPerSetButtons","getArtsPerSet","maxArtsPerSet","changeDefaultElvl","GSState","MedalsState","modifySelectedSet","list","setX","setx","nbArtsWanted","getResults","solutionMessage","optimisedSets","pushInStates","closeScreenModal","artsLevels","enhancementModes","filterBySetLevel","fetch","process","response","versionNumberFromLocalStorage","currentVersion","json","sortedData","pushInArray","setTypesArray","dataSetTypeSplit","localeCompare","catch","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","refreshing","controller","console","log","postMessage","addEventListener","reload","error","ReactDOM","URL","origin","headers","get","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3448a3bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reddit.5df9c3c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/paypal.f3e24db2.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-icon.0255bf2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.60f532b7.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.7ef87c93.svg\";","export function randomNumber() { return Math.floor(Math.random() * (0 - 36 + 1)) + 36 };\n\n// https://css-tricks.com/tinted-images-multiple-backgrounds/\ndocument.getElementById('bg').style.background = 'linear-gradient(rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0.75)), url(\\'' + process.env.REACT_APP_BG_IMG + 'lvl-bgs/' + randomNumber() + '.jpg\\')';\n","import { randomNumber } from './randomBg';\n\n\nexport var baseStyle = {\n    overlay: {\n        zIndex: 1045,\n        overflow: 'scroll',\n        background: 'rgba(0, 0, 0, 0.75)',\n    },\n    content: {\n        position: 'absolute',\n        zIndex: 1050,\n        top: 0,\n        left: 0,\n        right: 'auto',\n        bottom: 'auto',\n        transform: 'translate(12.5%, 7.5vh)',\n        color: 'white',\n        height: 'auto',\n        maxHeight: '85vh',\n        width: '80%',\n        padding: '10px 20px',\n        // Just having fun with bg image\n        background: 'linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url(\\'' + process.env.REACT_APP_BG_IMG + 'lvl-bgs/' + randomNumber() + '.jpg\\')',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat',\n        backgroundAttachment: 'scroll',\n    }\n};\n\nexport const customStyles = {\n    ...baseStyle,\n    content: {\n        ...baseStyle.content,\n        width: 'auto',\n        maxWidth: '80%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, 7.5vh)',\n    }\n};","import React, { Component } from 'react';\nimport { customStyles } from '../styles/ModalStyle';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-modal';\n\nexport class ArtifactModal extends Component {\n    static propTypes = {\n        handler: PropTypes.func.isRequired,\n        artifact: PropTypes.object.isRequired,\n    };\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    isOpen={true}\n                    onRequestClose={this.props.handler}\n                    style={customStyles}\n                >\n                    <div>\n                        {this.props.artifact ? (\n                            <div>\n                                <div className=\"text-center\">\n                                    <h1 className=\"text-center\">{this.props.artifact.artifact_name} {this.props.artifact.art_level}</h1>\n                                    <img className=\"text-center\"\n                                        src={this.props.artifact.artifact_img}\n                                        alt={this.props.artifact.artifact_name} />\n                                </div>\n                                <p className=\"col-12\">Artifact n° : {this.props.artifact.artifact_number}</p>\n                                <p className=\"col-12\">Bonus 1\n                                    : {this.props.artifact.bonus1} {this.props.artifact.race1 ? this.props.artifact.race1 : null}</p>\n                                <p className=\"col-12\">Bonus 2\n                                    : {this.props.artifact.bonus2} {this.props.artifact.race2 ? this.props.artifact.race2 : null}</p>\n                            </div>\n                        ) : null}\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ArtifactModal } from '../Modals/ArtifactModal';\n\n\nexport default class Artifact extends Component {\n    static propTypes = {\n        artifact: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showArtStats: false\n        };\n        this.closeArtStats = this.closeArtStats.bind(this)\n    }\n\n    closeArtStats = () => {\n        this.setState({ showArtStats: false })\n    };\n\n    render() {\n        return (\n            <div>\n                {this.state.showArtStats ? (\n                    <ArtifactModal\n                        handler={this.closeArtStats}\n                        artifact={this.props.artifact}\n                    />\n                ) : null}\n                <img\n                    onClick={() => this.setState({ showArtStats: true })}\n                    className=\"art-image\"\n                    src={this.props.artifact.artifact_img}\n                    alt={this.props.artifact.artifact_name}\n                />\n            </div>\n        )\n    }\n}","import React, { Component, Fragment } from 'react';\nimport { customStyles } from '../styles/ModalStyle';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-modal';\nimport { ArtifactModal } from './ArtifactModal';\n\nexport class SetModal extends Component {\n    static propTypes = {\n        handler: PropTypes.func.isRequired,\n        sets: PropTypes.array.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            artifacts: [],\n            showArtStats: false,\n            artNumberToShow: 0,\n        }\n    }\n\n    UNSAFE_componentWillMount() {\n        this.setState({\n            artifacts: [\n                this.props.sets[0].artifact1,\n                this.props.sets[0].artifact2,\n                this.props.sets[0].artifact3,\n                this.props.sets[0].artifact4,\n                this.props.sets[0].artifact5,\n                this.props.sets[0].artifact6\n            ],\n        });\n    }\n\n    closeArtStats = () => {\n        this.setState({ showArtStats: false })\n    };\n\n    showArts = (art) => {\n        if (art) {\n            return (\n                <div key={art.artifact_number}>\n                    {this.state.showArtStats && art.artifact_number === this.state.artNumberToShow ? (\n                        <ArtifactModal\n                            handler={this.closeArtStats}\n                            artifact={art}\n                        />\n                    ) : null}\n                    <img\n                        onClick={() => this.setState({ showArtStats: true, artNumberToShow: art.artifact_number })}\n                        className=\"art-image mt-2\"\n                        src={art.artifact_img}\n                        alt={art.artifact_name}\n                    />\n                </div>\n            );\n        }\n    };\n\n    setDefaultValue = (value) => {\n        return value ? value : 'X';\n    };\n\n    filterBonuses = (set, index) => {\n        return Object.keys(set).map(key => {\n            if (key.match(/^bonus/)) {\n                const getRace = set[key.replace('bonus', 'race')] ? ' ' + set[key.replace('bonus', 'race')] : '';\n                const bonusValue = set[key.replace('bonus', 'value')];\n                return index === 0 ? [set[key] + getRace, bonusValue] : [bonusValue];\n            } else {\n                return null;\n            }\n        }).filter(bonus => bonus);\n    };\n\n    setRows = (setArtsNumber, bonuses) => {\n        function fillArray(color, cap = 4, length = bonuses.length) {\n            const fillMissingData = [];\n\n            if (length < cap) {\n                for (let i = length; i < cap; i++) {\n                    fillMissingData.push(\n                        <td key={i} className={`${color} align-middle`}>X</td>\n                    )\n                }\n            }\n\n            return fillMissingData;\n        }\n\n        return bonuses[0].map((bonusName, index) => {\n            const bonus = bonusName[0];\n\n            // Using regex to set rows colors\n            const mustHaveStats = /Game Speed|Medals Obtained/;\n            const attackStats = /Attack Power|Attack Speed|Critical Damage|Critical Strike Rate|Movement Speed/;\n            const ecoStats = /Open Gold|Quest Upgrade|Unit Upgrade|Gold Acquisition|Quest Time/;\n            const defStats = /HP Of|Defense Power|Revival Time/;\n            const otherStats = /Dungeon Material|Battle Engaging/;\n\n            const rowColor = bonus.match(mustHaveStats) ? 'table-success' :\n                bonus.match(attackStats) ? 'table-danger' :\n                    bonus.match(ecoStats) ? 'table-warning' :\n                        bonus.match(defStats) ? 'table-secondary' :\n                            bonus.match(otherStats) ? 'table-info' : '';\n\n            // Have to set multiple conditions since sets can be only 3 parts and 3 bonus actived from it\n            const bonusStep =\n                // Create <th> only if index is 0 or ('even' and setArtsNumber is 3)\n                index === 0 || (index % 2 === 0 && setArtsNumber !== 3) ? (\n                    // Defining rowSpan size depending on setArtsNumber and its content\n                    // If set is 3 parts set, 3/3 is shown\n                    // If set has more than 3 parts, it means it got bonus every 2 arts steps\n                    // So we create a <th> every 2 lines to show which step is required for the bonus (i.e 2/4)\n                    // For 'odd' sets (5 parts) we check the index+2 value to fix the case where we got 6/5 (last bonus step)\n                    <th\n                        rowSpan={setArtsNumber === 3 && index === 0 ? 3 : 2}\n                        className=\"align-middle table-light\"\n                    >\n                        {\n                            setArtsNumber === 3 && index === 0 ? setArtsNumber + '/' + setArtsNumber :\n                                index % 2 === 0 ?\n                                    index + 2 > setArtsNumber ?\n                                        setArtsNumber + '/' + setArtsNumber : index + 2 + '/' + setArtsNumber : null\n                        }\n                    </th>\n                )\n                    : null;\n\n            return (\n                <tr key={index}>\n                    {bonusStep}\n                    <td className={rowColor}>\n                        {this.setDefaultValue(bonus)}\n                    </td>\n                    {bonuses.map((bonusArray, indexArray) => {\n                        return (\n                            <td key={bonusArray}\n                                className={`${rowColor} align-middle bolded`}>\n                                {indexArray !== 0 ?\n                                    this.setDefaultValue(bonusArray[index][0]) : this.setDefaultValue(bonusArray[index][1])}\n                            </td>\n                        )\n                    }\n                    )}\n                    {fillArray(rowColor)}\n                </tr>\n            )\n        })\n    };\n\n    createTable = (setArtsNumber, bonusValues) => {\n        return (\n            <Fragment>\n\n                <table className=\"table table-striped table-bordered table-dark black-text mt-2\">\n                    <tbody>\n                        <tr className=\"table-light align-middle\">\n                            <th style={{ width: '10%' }} />\n                            <th style={{ width: '50%' }}>Bonus</th>\n                            <th style={{ width: '10%' }}>T0</th>\n                            <th style={{ width: '10%' }}>T1</th>\n                            <th style={{ width: '10%' }}>T2</th>\n                            <th style={{ width: '10%' }}>T3</th>\n                        </tr>\n                        {this.setRows(setArtsNumber, bonusValues)}\n                    </tbody>\n                </table>\n                <table className=\"table table-bordered table-dark black-text\">\n                    <tbody>\n                        <tr>\n                            <th className=\"table-success\">GS/Medals</th>\n                            <th className=\"table-danger\">Attack</th>\n                            <th className=\"table-warning\">Economy</th>\n                            <th className=\"table-secondary\">Defense</th>\n                            <th className=\"table-info\">Others</th>\n                        </tr>\n                    </tbody>\n                </table>\n            </Fragment>\n        )\n    };\n\n    render() {\n        const defaultSet = this.props.sets[0];\n        const bonusValues = this.props.sets.map((set, index) => this.filterBonuses(set, index));\n\n        return (\n            <div>\n                <Modal\n                    isOpen={true}\n                    onRequestClose={this.props.handler}\n                    style={customStyles}\n                >\n                    <div className=\"text-center\">\n                        <h1>{defaultSet.set_name.replace(/ \\(\\dp\\)/g, '')} {defaultSet.artifact1.art_level}</h1>\n                        {defaultSet ? (\n                            <div className=\"row justify-content-around\">\n                                {this.state.artifacts.map(this.showArts)}\n                            </div>\n                        ) : null}\n                        {this.createTable(defaultSet.set_arts_number, bonusValues)}\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}","import React, { Fragment, Component } from 'react';\nimport Artifact from './Artifact';\nimport PropTypes from 'prop-types';\nimport { SetModal } from '../Modals/SetModal';\n\nexport default class Set extends Component {\n    static propTypes = {\n        set: PropTypes.object.isRequired,\n        wholeSetForModalStats: PropTypes.array.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            artifacts: [],\n            selectedSet: null,\n            showSetStats: false,\n        };\n    }\n\n    UNSAFE_componentWillMount() {\n        this.setState({\n            artifacts: [\n                this.props.set.artifact1,\n                this.props.set.artifact2,\n                this.props.set.artifact3,\n                this.props.set.artifact4,\n                this.props.set.artifact5,\n                this.props.set.artifact6\n            ],\n        });\n    }\n\n    showArts = (art) => {\n        if (art) {\n            return (\n                <div key={art.artifact_number} className=\"col-4\">\n                    <Artifact artifact={art} />\n                </div>\n            );\n        }\n    };\n\n    closeSetStats = () => {\n        this.setState({ showSetStats: false })\n    };\n\n    render() {\n        const regex = / \\(\\dp\\)/;\n        return (\n            <Fragment>\n                {this.state.showSetStats ? (\n                    <SetModal\n                        handler={this.closeSetStats}\n                        sets={this.props.wholeSetForModalStats}\n                    />\n                ) : null}\n                <div\n                    onClick={() => this.setState({ showSetStats: true })}\n                    className={`text-center bolded bordered white-text mt-2 set-title`}>\n                    {this.props.set.set_tech_name.replace(regex, '')}\n                </div>\n                <div\n                    className={`text-center white-text mb-2`}>\n                    {this.props.set.set_name.replace(regex, '')}\n                </div>\n                <div className=\"row justify-content-center\">{this.state.artifacts.map(this.showArts)}</div>\n            </Fragment>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { customStyles } from '../styles/ModalStyle';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-modal';\n\nexport class ScreenshotModal extends Component {\n    static propTypes = {\n        handler: PropTypes.func.isRequired,\n        canvas: PropTypes.string.isRequired,\n        canvasMobile: PropTypes.string,\n    };\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    isOpen={true}\n                    onRequestClose={this.props.handler}\n                    style={customStyles}\n                >\n                    <img\n                        className=\"screenshot\"\n                        src={this.props.canvas ? this.props.canvas : this.props.canvasMobile}\n                        alt=\"Screenshot\" />\n                </Modal>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport PropTypes from 'prop-types';\nimport { baseStyle } from '../styles/ModalStyle';\nimport reddit from '../img/reddit.svg';\nimport paypal from '../img/paypal.svg';\nimport github from '../img/github-icon.svg';\nimport facebook from '../img/facebook.svg';\n\nModal.setAppElement('#root');\n\n\nexport class HeaderModal extends Component {\n    static propTypes = {\n        handler: PropTypes.func.isRequired,\n        isMobile: PropTypes.bool.isRequired,\n        FBLink: PropTypes.string.isRequired,\n        testFBApp: PropTypes.func.isRequired,\n    };\n\n    logoUrl = (url, logo, alt) => {\n        return this.props.isMobile && alt === 'Facebook' ? (\n            <li className={`list-inline-item ${alt !== 'Paypal' ? 'mr-2' : ''}`}>\n                <div className=\"efd\"\n                    onClick={this.props.testFBApp}>\n                    <img className=\"logo align-bottom\" src={logo} alt={alt} />\n                </div>\n            </li>\n        ) : (\n                <li className={`list-inline-item ${alt !== 'Paypal' ? 'mr-2' : ''}`}>\n                    <a className=\"efd\"\n                        href={url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">\n                        <img className=\"logo align-bottom\" src={logo} alt={alt} />\n                    </a>\n                </li>\n            );\n    };\n\n    render() {\n        const redditLink = 'https://www.reddit.com/r/EndlessFrontier/comments/bfj756/efab_endless_frontier_artifacts_builder/'\n        return (\n            <div>\n                <Modal\n                    isOpen={true}\n                    onRequestClose={this.props.handler}\n                    style={baseStyle}\n                >\n                    <div className=\"text-center\">\n                        <ul className=\"list-inline mb-1 col px-0\">\n                            <li className=\"list-inline-item mr-2\">\n                                <a className=\"efd\"\n                                    href=\"https://www.endlessfrontierdata.com/\" target=\"_blank\"\n                                    rel=\"noopener noreferrer\">EFD</a>\n                            </li>\n                            {this.logoUrl(redditLink, reddit, 'Reddit')}\n                            {this.logoUrl(this.props.FBLink, facebook, 'Facebook')}\n                            {this.logoUrl('https://github.com/Rdyx/EF-Artifacts-Builder', github, 'Github')}\n                            {this.logoUrl('https://www.paypal.me/rdyx', paypal, 'Paypal')}\n                        </ul>\n                        <h2 className=\"col-12 version-underline pb-2\">Endless Frontier Artifacts Builder</h2>\n                        <p className=\"col-12\">This builder has been made by Rdyx (Server 1 @ Limitless).</p>\n                        <p className=\"col-12\">\n                            I simply wanted to discover some frameworks and have a user-friendly interface\n                            to build sets setups.\n                        </p>\n                        <p className=\"col-12\">\n                            A special thank\n                            to <a className=\"efd\"\n                                href=\"https://www.endlessfrontierdata.com/\" target=\"_blank\"\n                                rel=\"noopener noreferrer\">Endless Frontier Data</a> for\ntheir data about arts and their artifacts images.\n                        </p>\n                        <p className=\"col-12\">\n                            Feel free to like EFAB\n                            on <a className=\"efd\"\n                                href=\"https://www.facebook.com/EFABuilder/\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">Facebook</a> to\n                                stay updated about last releases and to contact me.</p>\n                        <p className=\"col-12\">\n                            You can also give feedback on <a className=\"efd\"\n                                href={redditLink}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">Reddit</a>\n                            , Discord @ <b className=\"limegreen-text\">Rdyx#7572</b> or directly by mail @ <b className=\"limegreen-text\">admin@efab.ovh</b>\n                        </p>\n                        <p className=\"col-12\">\n                            Source code is free to read at <a className=\"efd\"\n                                href=\"https://github.com/Rdyx/EF-Artifacts-Builder\"\n                                target={\"_blank\"} rel=\"noopener noreferrer\">GitHub</a>\n                        </p>\n                        <h4 className=\"col-12\">Thanks for reading, happy building !</h4>\n                        <p className=\"col-12 small mb-0\">\n                            If you like this tool and want to support/reward me, feel free to use\n                            the <b>Donate</b> button ! It will help me for sever costs ! Thanks ! :)\n                        </p>\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { baseStyle } from '../styles/ModalStyle';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-modal';\n\nexport class VersionModal extends Component {\n    static propTypes = {\n        handler: PropTypes.func.isRequired,\n        versions: PropTypes.array.isRequired,\n    };\n\n    versionMapping = (v, length, index) => {\n        const lastIndex = length - 1 === index;\n        return (\n            <div key={v.number}>\n                <div className=\"row version-underline pb-0\">\n                    <div className=\"col-1 mr-2\"><b><i>{v.number}</i></b></div>\n                    <div className=\"col\"><b>{v.title}</b></div>\n                    <div className=\"col-3 col-sm-2 pr-0\"><b><i>{v.date}</i></b></div>\n                </div>\n                <div className={`row pt-1 ${lastIndex ? '' : 'mb-4'}`}>\n                    <div className=\"col-1\" />\n                    <div className=\"col-11\">\n                        <ul className={`pl-3 ${lastIndex ? 'mb-0' : ''}`}>\n                            {\n                                Object.keys(v.content).map(function (key, index) {\n                                    return (<li key={v.number + '' + index}>{v.content[key]}</li>);\n                                })\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    };\n\n    render() {\n        const versions = this.props.versions;\n\n        return (\n            <div>\n                <Modal\n                    isOpen={true}\n                    onRequestClose={this.props.handler}\n                    style={baseStyle}\n                >\n                    <div>\n                        <div className=\"row mb-1 pb-2\">\n                            <h2 className=\"col-12 version-underline pb-2 text-center\">Patch Notes</h2>\n                        </div>\n                        {versions.map((v, index) => {\n                            return this.versionMapping(v, versions.length, index)\n                        })}\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}","export const versions = [\n    {\n        number: '1.12.2',\n        date: '26th October 2020',\n        title: \"Data update & bug fixes.\",\n        content: {\n            point1: \"Updated sets data & optimiser to take in account 9* sets.\",\n            point2: \"Fixed some problems with CSS encountered after having updated used librairies.\",\n        },\n    },\n    {\n        number: '1.12.1',\n        date: '1st June 2020',\n        title: \"9* Sets now have 5th level of enhancement, quick fixes.\",\n        content: {\n            point1: \"9* Sets now have their 5 enhancement levels available.\",\n            point2: \"Quick fix about artifact modal when an artifact was clicked in the set modal (Clicking on a single artifact was triggering every artifact modal).\",\n            point3: \"Quick fix about the Reset Summary button which was not resetting properly selected sets in Manual Build mode.\",\n        },\n    },\n    {\n        number: '1.12.0',\n        date: '17 Mai 2020',\n        title: \"New data (9* sets & T2 8*), quick UI improvement.\",\n        content: {\n            point1: \"9* and T2 8* sets have been added and are now taken in account in automatic build.\",\n            point2: \"Artifact level is now shown when you click on an artifact (right to its name).\",\n            point3: \"Slightly modified text search, now taking in account set names and their technical names at the same time.\",\n        },\n    },\n    {\n        number: '1.11.3',\n        date: '15 Mai 2020',\n        title: \"EFAB is back!\",\n        content: {\n            point1: \"I am glad to announce that EFAB has got some service again! Thank you for your support messages and very sorry for the unconvenience, this happened at a pretty bad time!... I'll try to add the latest data ASAP but it can take some time since it looks like I missed a serious bunch of things!\",\n            point2: \"Added a slightly improvement to use less bandwith if you already have the latest data available! ;)\",\n        },\n    },\n    {\n        number: '1.11.2',\n        date: '30 October 2019',\n        title: \"New sets data (Raid 1, Raid 5, Airship sets), bug fix.\",\n        content: {\n            point1: \"New sets data is available.\",\n            point2: \"Fixed bug in EFAB presentation modal where Mobile links were all redirecting to EFAB's Facebook page.\",\n            point3: \"Sorry for being late in this data update, I stopped to play EF some times ago so I lacked about data update. Feel free to contact me directly when some new sets are out so I can update ASAP :)\",\n        },\n    },\n    {\n        number: '1.11.1',\n        date: '3 July 2019',\n        title: \"New sets data (7* T3 & 8* T1), bug fixes.\",\n        content: {\n            point1: \"New sets data is available, you can now use 7* T3 and 8* T1! :)\",\n            point2: \"Summer Airships, Bear Airships and Indian Gods sets are now available.\",\n            point3: \"Modified GS calculation for easier maintenability.\",\n            point4: \"Fixed some sets data (airships GS has changed).\",\n        },\n    },\n    {\n        number: '1.11.0',\n        date: '21 May 2019',\n        title: \"Added sets sorting systems, reworked Settings tab under Help section.\",\n        content: {\n            point1: \"You can now sorts sets by certain values in the Settings. Available orders are: Number of arts per sets, Alphabetical, GS Amount & Medals amount. More informations about it in the Help section! ;)\",\n            point2: \"Reworked Settings tab to be less messy and more relevant.\",\n            point3: \"Added Raid 5 Set (Ancient Frost Civilization raid).\",\n            point4: \"Based on user feedback, default enhancement mode will now be manual. Should make EFAB easier to use for newcomers! :)\"\n        },\n    },\n    {\n        number: '1.10.4',\n        date: '29 April 2019',\n        title: \"Changed data storage system, auto-refresh after update.\",\n        content: {\n            point1: \"The data storage has been changed, app won't be built with data directly anymore. Data is available directly on github (data branch) or in gcloud bucket storage (https://storage.googleapis.com/efab-data-storage/data.json), please notice you won't be able to directly fetch the URL.\",\n            point2: \"After a new version is out, app should automatically refresh.\"\n        },\n    },\n    {\n        number: '1.10.2',\n        date: '26 April 2019',\n        title: \"Modified FB Button behavior, fixed message when offline.\",\n        content: {\n            point1: \"Facebook button will now redirect directly the the FB page on the app. Thumbs up for it ! (Safari not supporting it tho...).\",\n            point2: \"Fixed error message when first time connect and can't get the sets data.\"\n        },\n    },\n    {\n        number: '1.10.1',\n        date: '25 April 2019',\n        title: \"Changed old domain main page, fixed regex bug in search bar, changed splash screen bg color.\",\n        content: {\n            point1: \"Old URL index has been updated to redirect here automatically (If you have already visited it before, cache and service worker should block it though...).\",\n            point2: \"Fixed bug while using special characters in search bar.\",\n            point3: \"Splash screen color (loading screen in app mode on Android) background has been changed to EFAB theme colors.\"\n        },\n    },\n    {\n        number: '1.10.0',\n        date: '24 April 2019',\n        title: \"Added documentation client side, revamped and normalized Modals (styles, content), added patch node modal after update.\",\n        content: {\n            point1: \"As requested more and more, a freshly new documentation has been added under the \\\"Help\\\" button. Reading it should help you to understand many things about EFAB! ;)\",\n            point2: \"Revamped and normalized Modals. For easier usage and more aesthetic design.\",\n            point4: \"Buttons available into documentation to help you find what you want faster.\",\n            point3: \"Options button has been renamed to Settings. Settings has been separated into tabs, simply click on a button to show which settings are available in it.\",\n            point5: \"Added a Patch Note modal that will appear after each update. Closing it will hide it untill next update. You will now be aware of changes without even searching for it! :P\",\n            point6: \"Bug Fixes.\",\n            point7: \"✓✓✓✓✓ ADDED THE SACRO SAINT CHECKMARK THAT WAS REQUESTED SINCE SO LONG ✓✓✓✓✓\"\n        },\n    },\n    {\n        number: '1.9.0',\n        date: '21 April 2019',\n        title: \"New Filter, Mobile Landscape UI fixes, new Reddit link, Modals colors\",\n        content: {\n            point1: \"New filter available! You can now filter sets by their number of artifacts. I found that sometimes it was annoying to find a specific number of artifacts so this filter should help you (and me) about it! ;D\",\n            point2: \"Fixed some UI problems if EFAB was used in landscape mode on some mobiles.\",\n            point3: \"Fixed a bug if you selected a solution N°2 (or more) with auto-builder, was not showing the default selection anymore after it.\",\n            point4: \"Created a new thread on Reddit since the old one went in archived mode, new links available.\",\n            point5: \"Changed background and modals colors to be more compliant with overall design.\"\n        },\n    },\n    {\n        number: '1.8.4',\n        date: '15 April 2019',\n        title: \"Bug Fix\",\n        content: {\n            point1: \"Fixed a bug with enhancements and some sets (Nordic & Greek Gods)\",\n        },\n    },\n    {\n        number: '1.8.3',\n        date: '13 April 2019',\n        title: \"Bug Fixes and minor UI improvements\",\n        content: {\n            point1: \"Fixed mobile UI bugs.\",\n            point2: \"Added Endless Frontier Backgrounds to add some color. :)\"\n        },\n    },\n    {\n        number: '1.8.2',\n        date: '12 April 2019',\n        title: \"UI Reworking/Normalization\",\n        content: {\n            point1: \"Normalized UI buttons size for better usage and readability on higher resolutions screens.\",\n        },\n    },\n    {\n        number: '1.8.1',\n        date: '09 April 2019',\n        title: \"UI Modifications\",\n        content: {\n            point1: \"Revamped a bit UI for better readability, may change again based on feedbacks. ;)\",\n            point2: \"Added Facebook like button to avoid users to search for it.\"\n        },\n    },\n    {\n        number: '1.8.0',\n        date: '08 April 2019',\n        title: \"Sets Enhancements Levels, New Server (!), Facebook Page, New Data System, Summary Reset Button...\",\n        content: {\n            point1: \"Sets Enhancements Levels are finally out! You can now select which enhancement level you want for a set to get its stats. You will find the corresponding buttons under each sets. Enhancement will apply only if set is full (according to EF).\",\n            point2: \"In the \\\"Options\\\" button, you will find 2 ways to modify sets enhancements. \\\"Manual\\\" will let you select manually each level while \\\"All\\\" will modify every set at once. Also, the last enhancement level selected with \\\"All\\\" button will keep it as default for future loads! Please notice that changing an enhancement will also modify the set stats in the Summary list.\",\n            point3: \"Because of some conflicts with old server, I managed to buy a domain and host EFAB directly on the cloud. This should help deploy procedure and make the app loading faster. You should not use the old URL anymore as it will be taken down shortly.\",\n            point4: \"Because there is no more database, visitor counter has been taken down too (sadly for me!). I don't know if it will come back someday for now.\",\n            point5: \"This brings us to the \\\"point 5\\\". If you have some interest in EFAB, feel free to give a like to the new Facebook Page. It will help me to track up your interest for EFAB. You can also contact me by this way now! :)\",\n            point6: \"Sets have been re-ordered, this should make the list a bit less \\\"random\\\". Sets are now ordered like this: Type > Level (stars) > Artifact ID. This means the list should now more reflect how the game evolved.\",\n            point7: \"There's a new Reset Summary button. Use it for easier list cleaning!\",\n            point8: \"Some data has been added. Now have the Egyptian Gods sets stats and the FHL SR set + stats.\",\n            point9: \"A big thanks for you, users! We almost reached the 11000 (!) launches since EFAB starts! I would never have expected it so again, thank you all! :)\",\n        },\n    },\n    {\n        number: '1.7.1a',\n        date: '26 January 2019',\n        title: \"Auto-builder results system modified, Set Summary modal, Summary Box update and manual/auto swap modified.\",\n        content: {\n            point1: \"Results from auto-builder has been slightly modified, the base algorithm is still the same but you will now have all results (previously only \\\"best\\\" ones if possible or closest ones) sorted by the art number. This will let you have more choices, even not the most relevant ones, from the results.\",\n            point2: \"Summary Box slight update, you can now see how much parts a set is using after its technical name.\",\n            point3: \"You can now have a set stats summary, simply click on its technical name and you'll have a table with its stats. The legend used is from my own appreciation, it may differ for you but it's just there to help you for readability.\",\n            point4: \"A very big thanks for your feedbacks, as noticed, the algorithm is kicking off sub-parted sets for its final results (too long to explain here), that's why you can sometimes find better compositions than the algorithm when you use some!\",\n            point5: \"To try to help you build, swaping from auto to manual builder will now keep the solution you're using. That means you can use a \\\"close\\\" suggested result and complete it the way you want. When you'll back to auto from manual you will get the inputs filled as you did plus you will know which build you selected before (if you did). Sets you excluded will be kept and tiers filters too.\",\n            point6: \"Fixed minor bugs, such as using special characters in search field was making EFAB crash before. Now, they are ignored.\",\n            point7: \"Again, a big thanks for your feedbacks, I try to do as much as i can! :)\",\n        },\n    },\n    {\n        number: '1.7.0a',\n        date: '20 January 2019',\n        title: \"Another very huge update! Automatic builder is here!\",\n        content: {\n            point1: \"The Automatic builder to find the bests setups depending on what you need is up! To use it, simply use the inputs at the top of sets boxes. Fill how much artifacts you want to use, the maximum gs you want and build! That's as simple as this!\",\n            point2: \"The algorithm can find optimised builds and if it's not possible you can also get the closest results it found (or none if you asked something not reachable).\",\n            point3: \"You can filter which sets' tier you want in the filter list. I.E: you can autobuild with T2 6* and T1 7*\",\n            point4: \"Every set is counted with its parts. I.E: for BE (R2) set, 2/5, 4/5 AND 5/5 are taken in account in the build. If you disable it, you will also disable every parted bonus.\",\n            point5: \"You can still use the manual builder, just click on the new button in the top bar.\",\n            point6: \"You can disable a set from builder by clicking on the \\\"X\\\" at the top of its box.\",\n            point7: \"This update is still in alpha since I probably can't think about everything that could happens when you try to build. It required many code addition, update and redesigning. This means you can find some bugs. Feel free to report (contacts in EFAB logo)\",\n            point8: \"If you find a better combination than the algorithm, feel free to report it to me with screens, I will try to check it out.\",\n            point9: \"The algorithm is based on the Multi-Dimensional Knapsack Problem (MDKP) modified to work with EF constraints.\"\n        },\n    },\n    {\n        number: '1.6.0',\n        date: '09 January 2019',\n        title: \"New major update! New filtering system + some redesign.\",\n        content: {\n            point1: \"Enhanced filtering system! There is now a button dedicated to show filters, less mess on the main page! You can still use \\\"old\\\" filters and you can now select only sets having the selected bonus! Thanks @xanderbitme for the suggestion on reddit.\",\n            point2: \"Filters are stackable! \",\n            point3: \"From the previous point, you now have filter button in the top bar, when filters are applyed the filter button will turn green and you'll have a reset filter button available.\",\n            point4: \"Redesigned text input search bar. Will now be bigger and easier to reach on small devices.\",\n            point5: \"Redesigned Stats Summary box, you can now have a better view of your current stats and also have each set stats next to it.\",\n            point6: \"Modified modal close system. Previously any click would close it, now if you click on the \\\"textbox\\\" it will keep opened. You have to click outside of it (or press esc) to close it. This will prevent unwanted modal closures.\",\n            point7: \"Moved the not connected alert out of summary box for computer screen extraction. You will no longer have it on your offline saved setups.\",\n            point8: \"Removed some forgotten console.log() (Woopsie!)\",\n        },\n    },\n    {\n        number: '1.5.2',\n        date: '17 December 2018',\n        title: \"Minor bug fix for selected list and stats calculation.\",\n        content: {\n            point1: \"Fixed bug that was not clearing list properly (previously on index from a weird map(), now properly get index from selected set list based on set name).\",\n        },\n    },\n    {\n        number: '1.5.1',\n        date: '16 November 2018',\n        title: \"Minor design fixes for mobile/tablet devices.\",\n        content: {\n            point1: \"Fixed set categories text going out of the box under specific resolutions (ipad mostly).\",\n        },\n    },\n    {\n        number: '1.5',\n        date: '15 November 2018',\n        title: \"Offline mod, minor changes.\",\n        content: {\n            point1: \"You can now use EFAB offline! This will require to at least access the app online once then data will be stocked and you'll be able to use everything as usual even if you have no connection!\",\n            point2: \"Image links added to modal upon EFAB logo.\",\n        },\n    },\n    {\n        number: '1.4',\n        date: '14 November 2018',\n        title: \"Mobile Application prompt, mobile summary list button.\",\n        content: {\n            point1: \"Your browser should now propose you to \\\"install\\\" EFAB on your mobile! It's a simple link to the app but without all the browsers features around like URL bar!\",\n            point2: \"Mobile button to show summary of selected arts list has changed, it should feel more \\\"natural\\\".\",\n        },\n    },\n    {\n        number: '1.3.1',\n        date: '13 November 2018',\n        title: \"Minor updates, fixed api public urls, design fixes, donation button.\",\n        content: {\n            point1: \"Few updates upon back-end (forced HTTPS, public urls).\",\n            point2: \"Updated different modals sizes.\",\n            point3: \"Added paypal.me link, if you like this tool feel free to support and reward me! :)\",\n        },\n    },\n    {\n        number: '1.3',\n        date: '12 November 2018',\n        title: \"Sets selection modified, EFAB infos changed, improved performances.\",\n        content: {\n            point1: \"Sets selections has been modified, you can now select only 1 set (from same family) at a time. To unselect it, simply click on the \\\"X\\\" above.\",\n            point2: \"Changed infos in EFAB logo, feel free to send feedbacks directly on Reddit now! :)\",\n            point3: \"Improved overall performances and accessibility.\",\n            point4: \"Even if it's not that usefull here since you don't use sensible data, HTTPS in now enabled! Feel safe!\",\n        },\n    },\n    {\n        number: '1.2',\n        date: '11 November 2018',\n        title: \"Versioning status + arts number sorting.\",\n        content: {\n            point1: \"Added versioning status to track historical versions, since this is new, starting version is now 1.2.\",\n            point2: \"From recommendation, summary box is now in a more neutral color and font is black for better readability.\",\n            point3: \"Added sorting arts number for every sets (I.E previous was 6 2 4, now it's 2 4 6).\",\n            point4: \"Updated every 7* sets data for new T2!\",\n        },\n    },\n];\n\n","import React from 'react';\n\n// Depth is used to know if there are sub-buttons\nexport const setButtons = (title, arrayLength, selectedTab, handler) => {\n    return (\n        <button\n            key={title + 'HowToUse'}\n            className={`col-${Math.round(12 / arrayLength)} btn btn-outline-warning mb-1 mt-1 px-0 ${selectedTab === title ? 'btn-success' : ''}`}\n            onClick={handler}>\n            {title}\n        </button>\n\n    )\n}","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-modal';\nimport { baseStyle } from '../styles/ModalStyle';\nimport { setButtons } from './ModalsComponents/ButtonsModalComponent';\n\nexport class SettingsModal extends Component {\n    static propTypes = {\n        handler: PropTypes.func.isRequired,\n        setsTypes: PropTypes.array.isRequired,\n        bonusTypes: PropTypes.array.isRequired,\n        setsLevels: PropTypes.array.isRequired,\n        optimiser: PropTypes.bool.isRequired,\n        enhancementMode: PropTypes.array.isRequired,\n        enhancementLevels: PropTypes.array.isRequired,\n        totalArtsPerSet: PropTypes.array.isRequired,\n        setsSorting: PropTypes.array.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabs: ['Filters', 'Enhances', 'Sets Levels', 'Sorting'],\n            selectedTab: 'Filters'\n        }\n    }\n\n    render() {\n        const tabs = this.props.optimiser ? this.state.tabs : this.state.tabs.filter(tab => tab !== 'Set Levels');\n        const tabsLength = tabs.length;\n\n        return (\n            <div>\n                <Modal\n                    isOpen={true}\n                    onRequestClose={this.props.handler}\n                    style={baseStyle}\n                >\n                    <div className=\"row mb-1 version-underline pb-2\">\n                        <h2 className=\"col-12 version-underline pb-2 text-center\">EFAB Settings</h2>\n                        {tabs.map(tab => setButtons(\n                            tab,\n                            tabsLength,\n                            this.state.selectedTab,\n                            () => this.setState({ selectedTab: tab })\n                        ))}\n                    </div>\n                    <div className=\"row text-center justify-content-center\">\n                        {this.state.selectedTab === 'Filters' ? (\n                            <Fragment>\n                                <div className=\"col-12 col-md-6 mt-2\">\n                                    <h3>Category</h3>\n                                    {this.props.setsTypes}\n                                </div>\n                                <div className=\"col-12 col-md-6 mt-3 mt-sm-0 justify-content-around\">\n                                    <h3>Bonus Type</h3>\n                                    {this.props.bonusTypes}\n                                    <div className=\"row mx-auto\">\n                                        <h3 className=\"col-12 mt-2\">Arts per Set</h3>\n                                        {this.props.totalArtsPerSet}\n                                    </div>\n                                </div>\n                            </Fragment>\n                        ) : this.state.selectedTab === 'Enhances' ? (\n                            <div className=\"col-12 col-sm-6\">\n                                <h3 className=\"mt-2\">Sets Enhancement</h3>\n                                <div className=\"row mx-auto\">\n                                    {this.props.enhancementMode}\n                                </div>\n                                <div className=\"row mx-auto\">\n                                    {this.props.enhancementLevels}\n                                </div>\n                            </div>\n                        ) : this.state.selectedTab === 'Sets Levels' ? (\n                            <div className=\"col-12 col-sm-6\">\n                                <h3 className=\"mt-2\">Sets Levels</h3>\n                                {this.props.setsLevels}\n                            </div>\n                        ) : (\n                                        <div className=\"col-12 col-sm-6\">\n                                            <h3 className=\"mt-2\">Sets Sorting</h3>\n                                            {this.props.setsSorting}\n                                        </div>\n                                    )\n                        }\n                    </div>\n                </Modal>\n            </div >\n        )\n    }\n}","import React from 'react';\n\nexport const AutomaticBuilderInfo = (\n    <div className=\"row\">\n        <h2 className=\"col-12 version-underline pb-2 text-center\">Automatic Builder</h2>\n        <ul>\n            <li>\n                Fill the corresponding inputs at the top of the screen and click the <b>Build</b> button. The summary list will update\n                and show you the best result the algorithm found based on your conditions.\n            </li>\n            <li>\n                Click on the <button style={{ width: '30px' }} className=\"text-center text-color personnal-checkbox\"><i>X</i></button> or the <button style={{ width: '30px' }} className=\"text-center text-color personnal-checkbox\"><i>V</i></button> mark above each set to let the auto-builder know if it should take it in account or not.\n            </li>\n            <li>\n                You can select the enhancement level of the set, the auto-builder will know how to handle with it, watch the <b>Options</b> tab for more info.\n            </li>\n        </ul>\n        <h4 className=\"col-12 pb-2\"><u>Additionnal Informations</u></h4>\n        <ul>\n            <li>Algorithm is working this way:\n            <ul>\n                    <li>Orders selected sets by a GS/(Number of arts per set) ratio.\n            <ul>\n                            <li>I.E: +3 T2 Halloween set has 2 artifacts and 44% GS. Its GS/art is 22%.</li>\n                            <li>I.E2: +3 T2 AR (R1) set has 4 artifacts and 73% GS. Its GS/art is 18.25%, he will be further in the list than the previous example.</li>\n                        </ul>\n                    </li>\n                    <li>Takes every set in the previous ordered manner untill GS has been caped (without getting above)</li>\n                    <li>Fills the rest with maximum medals possible.</li>\n                </ul>\n            </li>\n        </ul>\n        <h4 className=\"col-12 pb-2\"><u>Tips & Tricks</u></h4>\n        <ul>\n            <li>Based on the Additionnal Informations, if you want to have less GS in your build, don't forget to remove the high GS ratio sets. This way you will ensure to have maximum medals possible.\n                                <ul>\n                    <li>I.E: You have 400% GS, you want to have a bit less around 370%, remove the Airships sets!\n                                        <ul>\n                            <li><i>Why?</i></li>\n                            <li>Because Airships sets have a very high ratio of GS/Art but a medium ratio of Medals/Art!</li>\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n            <li>Try to play around with the GS value to see if you can find a nice solution around your required GS. Being overcapped is not that much a problem since it will prevent you to swap arts for the next few KLs! ;)</li>\n            <li>You can use the auto-builder to create a base to fill your slots. Feel free to swap to manual-builder to find better combinations.\n                                <ul>\n                    <li>\n                        <b>It is even recommended since the algorithm is from my own adaptation and its results can sometimes be pushed further!</b></li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n);\n\nexport const ManualBuilderInfo = (\n    <div className=\"row\">\n        <h2 className=\"col-12 version-underline pb-2 text-center\">Manual Builder</h2>\n        <ul>\n            <li>\n                For each set you will have a \"box\". This box contains many buttons and lines:\n                <ul>\n                    <li>The <button style={{ width: '30px' }} className=\"text-center text-color personnal-checkbox\"><i>X</i></button> button, selected by default, is showing that the set is not selected.</li>\n                    <li>You will then find multiple lines (T0, T1, T2...). Each line represents the Tier of the set. You can select the number of arts you want for the tier you want by clicking on the corresponding button (<button style={{ width: '30px' }} className=\"text-center text-color personnal-checkbox\">2</button>, <button style={{ width: '30px' }} className=\"text-center text-color personnal-checkbox\">4</button>, etc...). After a set has been selected, it will appear in the Summary List.</li>\n                    <li>If enhancement is available for the set, you will have the possibility to select which level of enhancement you want for the set. As in Endless Frontier, enhancement will be taken in account only if you have the whole set selected. For more informations about how enhancement is working, see the Options tab.</li>\n                    <li>You will then see the \"Technical Name\" (Abreviation used by players mostly). You can click on it to find more infos about the set such as its stats.</li>\n                    <li>Then the real set's name.</li>\n                    <li>And finally which artifacts are composing the set. You can click on the artifacts to have more info such as their stats.</li>\n                </ul>\n            </li>\n        </ul>\n        <h4 className=\"col-12 pb-2\"><u>Additionnal Informations</u></h4>\n        <ul>\n            <li>When you change a set's enhancement level it will be updated automatically in the summary list.</li>\n            <li>In set's informations modal you only have the base stats shown. Enhancement is not taken in account. Simply add it to the summary list to preview it!</li>\n            <li>If you change manually a set's enhancement level, it will be keep even if you swap form auto-builder to manual-builder (and vice-versa)!</li>\n        </ul>\n    </div>\n);","import React from 'react';\n\nexport const MiscInfo = (\n    <div className=\"row\">\n        <h2 className=\"col-12 version-underline pb-2 text-center\">Misc</h2>\n        <ul>\n            <li>Feel free to click on the EFAB logo button to find more infos about EFAB, EFAB's related links and me! :)</li>\n            <li>Patch notes are stored in the version number next to the EFAB logo, click on it to see how EFAB evolved during the time!</li>\n            <li>Search bar is used to retrieve sets by their technical names.</li>\n            <li><i>The sets' groups names can be not relevant for you, they mostly come from my guild's mates and me!</i></li>\n            <li><i>The sets' technical names can be not relevant for you, they mostly come from my guild's mates and me!</i></li>\n        </ul>\n    </div>\n);","import React from 'react';\n\nexport const FiltersInfo = (\n    <div className=\"row\">\n        <h2 className=\"col-12 version-underline pb-2 text-center\">Filters</h2>\n        <ul>\n            <li>You will find 3 filters: Category, Bonus Type and Arts per Set. <ul>\n                <li>Selecting a Category means only sets in this category will be shown in the list.</li>\n                <li>Selecting a Bonus Type means only sets with the corresponding stat will be shown in the list.</li>\n                <li>Selecting a number of Arts per Set means only sets that have the same number of artifacts as the selection will be shown.</li>\n                <li>Each filter is cumulative! I.E: you can show only sets from Raid that have the Game Speed stats and 4 artifacts!</li>\n            </ul>\n            </li>\n        </ul>\n    </div>\n);\n\nexport const EnhancementsInfo = (\n    <div className=\"row\">\n        <h2 className=\"col-12 version-underline pb-2 text-center\">Enhancement</h2>\n        <ul>\n            <li>There are 2 mods to apply enhancements:\n                <ul>\n                    <li>Manual mode will let you enhance every set manually on your own.</li>\n                    <li>\"All\" mode is more like an automatic mode, it will change every set enhancement in one click.</li>\n                    <li><i>A little trick is to set the overall enhancement with automatic mode and get finer in manual after! ;)</i></li>\n                </ul>\n            </li>\n            <li>Please notice that if you select +4 in \"All\" mode, every set will adjust in accordance to its max enhancement possible.</li>\n        </ul>\n    </div>\n);\n\nexport const SetsLevelsInfo = (\n    <div className=\"row\">\n        <h2 className=\"col-12 version-underline pb-2 text-center\">Sets Levels</h2>\n        <ul>\n            <li>This button will appear only in auto-buider mode.</li>\n            <li>It will let you chose with which sets levels the auto-builder should work.</li>\n            <li>Please notice that you can't change each set level manually.</li>\n        </ul>\n    </div >\n);\n\nexport const SortingInfo = (\n    <div className=\"row\">\n        <h2 className=\"col-12 version-underline pb-2 text-center\">Sorting</h2>\n        <ul>\n            <li>You can sort sets by certain values:\n                <ul>\n                    <li>Arts per Set: Number of art per set.</li>\n                    <li>Alphabetical: Alphabetical order based on sets' technical names.</li>\n                    <li>GS Amount: Game Speed Amount.</li>\n                    <li>Medals Amount: Bonus Medals Amount.</li>\n                </ul>\n            </li>\n            <li>You can sort in two orders:\n                <ul>\n                    <li>ASC: Ascendant order (A -> Z, 0 -> +n...).</li>\n                    <li>DESC: Descendant order (Z -> A, +n -> 0...).</li>\n                </ul>\n            </li>\n            <li>You can cumulate multiple orders.\n                <ul>\n                    <li>I.E: Clicking on <b>GS Amount DESC</b> then on <b>Medals Amount DESC</b> will sort sets firstly by their amount of GS and then by their medals in DESC order.\n                    <ul>\n                            <li>50% GS / 1000% Medals -> 50% GS -> 500% Medals -> 30% GS / 1000% Medals...</li>\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n            <li>To reset the order, simply click on <b>Default</b>.</li>\n        </ul>\n    </div >\n);","import React from 'react';\n\nexport const ShareInfo = (\n    <div className=\"row\">\n        <h2 className=\"col-12 version-underline pb-2 text-center\">Share Button</h2>\n        <ul>\n            <li><i>Please notice this button is only available for \"large screens\" (> 992px width).</i></li>\n            <li>Use this button to share easely your summary list! It has been made for! :)</li>\n            <li>Clicking this button will generate an image from the summary list box, just right click -> Copy Image and then paste it wherever you want for fast and easy share!</li>\n        </ul>\n    </div>\n);","import React, { Component } from 'react';\nimport { baseStyle } from '../styles/ModalStyle';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-modal';\nimport { AutomaticBuilderInfo, ManualBuilderInfo } from './HowToUseContent/BuildersInfo';\nimport { MiscInfo } from './HowToUseContent/MiscInfo';\nimport { FiltersInfo, EnhancementsInfo, SetsLevelsInfo, SortingInfo } from './HowToUseContent/SettingsInfo';\nimport { ShareInfo } from './HowToUseContent/ShareInfo';\nimport { setButtons } from './ModalsComponents/ButtonsModalComponent';\n\nexport class HowToUseModal extends Component {\n    static propTypes = {\n        handler: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            infoTabs: ['Builders', 'Share List', 'Settings', 'Misc'],\n            selectedInfo: 'Builders',\n            buildersTabs: ['Automatic Builder', 'Manual Builder'],\n            selectedBuilder: 'Automatic Builder',\n            settingsTabs: ['Filters', 'Enhancements', 'Sets Levels', 'Sorting'],\n            selectedSetting: 'Filters',\n        }\n    }\n\n    render() {\n        const infoTabsLength = this.state.infoTabs.length;\n        const buildersTabsLength = this.state.buildersTabs.length;\n        const settingsTabsLength = this.state.settingsTabs.length;\n\n        return (\n            <div>\n                <Modal\n                    isOpen={true}\n                    onRequestClose={this.props.handler}\n                    style={baseStyle}\n                >\n                    <div className=\"row mb-1 version-underline pb-2\">\n                        <h2 className=\"col-12 version-underline pb-2 text-center\">How to use EFAB?</h2>\n                        {this.state.infoTabs.map(tab => setButtons(\n                            tab,\n                            infoTabsLength,\n                            this.state.selectedInfo,\n                            () => this.setState({ selectedInfo: tab })\n                        ))}\n                        {this.state.selectedInfo === 'Builders' ?\n                            this.state.buildersTabs.map((tab) => setButtons(\n                                tab,\n                                buildersTabsLength,\n                                this.state.selectedBuilder,\n                                () => this.setState({ selectedBuilder: tab })\n                            ))\n                            : null}\n                        {this.state.selectedInfo === 'Settings' ?\n                            this.state.settingsTabs.map((tab) => setButtons(\n                                tab,\n                                settingsTabsLength,\n                                this.state.selectedSetting,\n                                () => this.setState({ selectedSetting: tab })\n                            ))\n                            : null}\n                    </div>\n                    {this.state.selectedInfo === 'Builders' ?\n                        this.state.selectedBuilder === 'Automatic Builder' ?\n                            AutomaticBuilderInfo : ManualBuilderInfo :\n                        this.state.selectedInfo === 'Share List' ?\n                            ShareInfo : this.state.selectedInfo === 'Settings' ?\n                                this.state.selectedSetting === 'Filters' ?\n                                    FiltersInfo : this.state.selectedSetting === 'Enhancements' ?\n                                        EnhancementsInfo : this.state.selectedSetting === 'Sets Levels' ?\n                                            SetsLevelsInfo : SortingInfo : MiscInfo}\n                </Modal>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { HeaderModal } from \"../Modals/HeaderModal\";\nimport { VersionModal } from \"../Modals/VersionModal\";\nimport { versions } from \"../Versions/Versions\";\nimport { SettingsModal } from \"../Modals/SettingsModal\";\nimport { HowToUseModal } from '../Modals/HowToUseModal';\n\n// Used to show modal when new version has been released, localstorage value is set in service worker\n// If never have been set, set default to true, then use localStorage value\nconst showLastPatchNote = localStorage.getItem('showLastPatchNote') === null ? true : JSON.parse(localStorage.getItem('showLastPatchNote'));\n\nexport class NavBar extends Component {\n    static propTypes = {\n        swapManualToAutomaticBuilder: PropTypes.func.isRequired,\n        triggerScreenshot: PropTypes.func.isRequired,\n        searchBySetName: PropTypes.func.isRequired,\n        setFiltering: PropTypes.bool.isRequired,\n        setsTypes: PropTypes.array.isRequired,\n        bonusTypes: PropTypes.array.isRequired,\n        setsLevels: PropTypes.array.isRequired,\n        optimiser: PropTypes.bool.isRequired,\n        resetFilters: PropTypes.func.isRequired,\n        listLength: PropTypes.number.isRequired,\n        resetList: PropTypes.func.isRequired,\n        enhancementMode: PropTypes.array.isRequired,\n        enhancementLevels: PropTypes.array.isRequired,\n        connected: PropTypes.bool.isRequired,\n        totalArtsPerSet: PropTypes.array.isRequired,\n        setsSorting: PropTypes.array.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showInfoModal: false,\n            versionModal: false,\n            settingsModal: false,\n            howToUse: false,\n            showLastPatchNote: true,\n        }\n    };\n\n    UNSAFE_componentWillMount = () => {\n        localStorage.setItem('showLastPatchNote', showLastPatchNote)\n        this.setState({ showLastPatchNote: showLastPatchNote })\n    };\n\n    closeInfoModal = () => {\n        this.setState({ showInfoModal: false })\n    };\n\n    closeVersionModal = () => {\n        this.setState({ versionModal: false })\n    };\n\n    dontShowUntillNextUpdate = () => {\n        localStorage.setItem('showLastPatchNote', false)\n        this.setState({ showLastPatchNote: false })\n    };\n\n    closeSettingsModal = () => {\n        this.setState({ settingsModal: false })\n    };\n\n    closeHowToUse = () => {\n        this.setState({ howToUse: false })\n    };\n\n    testFBApp = () => {\n        var now = new Date().valueOf();\n        setTimeout(function () {\n            if (new Date().valueOf() - now > 1000) return;\n            window.location = \"https://www.facebook.com/EFABuilder/\";\n        }, 950);\n        window.location = \"fb://page/270195490537651\";\n    };\n\n    render() {\n        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n        const isMobile = navigator.maxTouchPoints > 0;\n        const FBLink = 'https://www.facebook.com/EFABuilder/';\n        const fbButtonStyle = { zIndex: 2, width: '63px', height: '40px', border: 'none', overflow: 'hidden', display: 'block' };\n\n        const FBIFrame = (\n            <iframe\n                src=\"https://www.facebook.com/plugins/like.php?href=https%3A%2F%2Fwww.facebook.com%2FEFABuilder&layout=box_count&action=like&colorscheme=dark&size=small&show_faces=false&share=false&appId\"\n                style={{ zIndex: 0, width: '63px', height: '40px', border: 'none', overflow: 'hidden' }} scrolling=\"no\"\n                frameBorder=\"0\" title=\"EFAB's Facebook Page\"\n            />\n        );\n\n        return (\n            <div>\n                {this.state.showInfoModal ? (\n                    <HeaderModal\n                        handler={this.closeInfoModal}\n                        isMobile={isMobile}\n                        FBLink={FBLink}\n                        testFBApp={() => this.testFBApp()} />\n                ) : null}\n                {this.state.versionModal ? (\n                    <VersionModal handler={this.closeVersionModal} versions={versions} />\n                ) : null}\n                {this.state.showLastPatchNote ? (\n                    <VersionModal handler={this.dontShowUntillNextUpdate} versions={[versions[0]]} />\n                ) : null}\n                {this.state.settingsModal ? (\n                    <SettingsModal\n                        handler={this.closeSettingsModal}\n                        setsTypes={this.props.setsTypes}\n                        bonusTypes={this.props.bonusTypes}\n                        setsLevels={this.props.setsLevels}\n                        optimiser={this.props.optimiser}\n                        enhancementMode={this.props.enhancementMode}\n                        enhancementLevels={this.props.enhancementLevels}\n                        totalArtsPerSet={this.props.totalArtsPerSet}\n                        setsSorting={this.props.setsSorting}\n                    />\n                ) : null}\n                {this.state.howToUse ? (\n                    <HowToUseModal handler={this.closeHowToUse} />\n                ) : null}\n                <nav className=\"row navbar navbar-dark bg-transparent justify-content-sm-around pt-2 justify-content-center\">\n                    <div className=\"navbar-brand mx-auto ml-lg-0 d-flex align-items-end justify-content-center mb-1 mb-lg-0\">\n                        <button className=\"underlined mr-2 big btn-link text-white\"\n                            onClick={() => this.setState({ showInfoModal: true })}>EFAB\n                        </button>\n                        <button className=\"underlined small btn-link text-white\"\n                            onClick={() => this.setState({ versionModal: true })}>{versions[0].number}</button>\n                    </div>\n                    <div className=\"col-12 d-lg-none\" />\n                    {this.props.connected ? isMobile ? (\n                        <div className=\"mb-2 my-sm-0 ml-1 fb-buttons\"\n                            style={fbButtonStyle}\n                            onClick={() => this.testFBApp()}>\n                            {FBIFrame}\n                        </div>\n                    ) : (\n                            <a className=\"mb-2 my-sm-0 ml-1 fb-buttons\"\n                                style={fbButtonStyle}\n                                scrolling=\"no\"\n                                href={FBLink}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">\n                                {FBIFrame}\n                            </a>\n                        ) : null}\n                    <a href=\"https://www.paypal.me/rdyx\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <button\n                            className=\"btn btn-outline-warning mb-2 my-sm-0 ml-1 p-2\"\n                        >\n                            Donate\n                        </button>\n                    </a>\n                    <button\n                        className=\"btn btn-outline-warning mb-2 my-sm-0 ml-1 p-2\"\n                        onClick={this.props.swapManualToAutomaticBuilder}>\n                        {this.props.optimiser ? 'Manual Builder' : 'Auto Builder'}\n                    </button>\n                    <button\n                        className=\"btn btn-outline-warning mb-2 my-sm-0 d-none d-sm-block ml-1 p-2\"\n                        onClick={this.props.triggerScreenshot}>\n                        Share Summary\n                    </button>\n                    <button\n                        className={`btn btn-outline-warning mb-2 my-sm-0 ml-1 p-2 ${this.props.setFiltering ? 'btn-success' : ''}`}\n                        onClick={() => this.setState({ settingsModal: true })}>\n                        Settings\n                    </button>\n                    <button\n                        className={`btn btn-outline-warning mb-2 my-sm-0 ml-1 p-2 ${this.props.listLength === 0 ? 'mr-0 mr-sm-1' : ''}`}\n                        onClick={() => this.setState({ howToUse: true })}>\n                        Help\n                    </button>\n                    {this.props.setFiltering ? (\n                        <button\n                            className={`btn btn-outline-warning btn-danger mb-2 my-sm-0 d-sm-block ml-1 p-2 ${this.props.listLength === 0 ? 'mr-0 mr-sm-1' : ''}`}\n                            onClick={this.props.resetFilters}>\n                            Reset Filters\n                        </button>\n                    ) : null}\n                    {this.props.listLength > 0 ? (\n                        <button\n                            className={`btn btn-outline-warning mb-2 my-sm-0 p-2 btn-danger mr-sm-1 ml-1`}\n                            onClick={this.props.resetList}>\n                            Reset Summary\n                        </button>\n                    ) : null}\n                    <div className=\"margin-top col-12 col-sm col-lg-3 pr-0 pl-0\">\n                        <input\n                            aria-label=\"Search By Set Technical Name\"\n                            name=\"search\"\n                            id=\"search\"\n                            type=\"text\"\n                            className=\"col-xs-12 form-control\"\n                            placeholder=\"Search Sets\"\n                            alt=\"Search Sets\"\n                            onChange={this.props.searchBySetName}\n                            autoComplete=\"off\"\n                        />\n                    </div>\n                </nav>\n            </div>\n        )\n    }\n}","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class ArtsBox extends Component {\n    static propTypes = {\n        setsData: PropTypes.array.isRequired,\n        optimiser: PropTypes.bool.isRequired,\n        optimiserNbArts: PropTypes.func.isRequired,\n        optimiserMaxGS: PropTypes.func.isRequired,\n        startBuild: PropTypes.func.isRequired,\n        wantedArts: PropTypes.number.isRequired,\n        maxGS: PropTypes.number.isRequired,\n        getOptimisedResults: PropTypes.array.isRequired,\n        getArrayResult: PropTypes.func.isRequired,\n        optimisedResultSelectedIndex: PropTypes.number.isRequired,\n    };\n\n    triggerBuild = (e) => {\n        return (e.keyCode || e.which) === 13 ? document.getElementById('submitBuild').click() : null;\n    };\n\n    getOptimisedResults = () => {\n        const resultLength = this.props.getOptimisedResults.length;\n\n        const solutions = [];\n        if (resultLength > 1 && this.props.getOptimisedResults[1].sets.length > 0) {\n            this.props.getOptimisedResults.map((set, index) => {\n                // Index will start above 0 since index 0 is the solutionMessage\n                return index > 0 ?\n                    solutions.push(\n                        <div\n                            key={index}\n                            className={`col-12 col-sm-3 text-center p-0 ml-1 mr-1`}>\n                            <input\n                                id={'solution' + index}\n                                onChange={this.props.getArrayResult}\n                                type=\"radio\"\n                                name=\"autoBuilderResult\"\n                                value={index}\n                                checked={index === this.props.optimisedResultSelectedIndex}\n                            >\n                            </input>\n                            <label htmlFor={'solution' + index}\n                                className=\"col text-color personnal-checkbox mb-2 green-check solution\">\n                                Solution {index}\n                            </label>\n                            <table\n                                className={`col table table-bordered table-striped personnal-table`}>\n                                <tbody>\n                                    <tr className=\"result-background\">\n                                        <th>Artifacts</th>\n                                        <th>Game speed</th>\n                                        <th>Medals</th>\n                                    </tr>\n                                    <tr className=\"text-center result-background\">\n                                        <th>{set.totalArts}</th>\n                                        <td>{set.gameSpeed ? set.gameSpeed : 0}</td>\n                                        <td>{set.medalsBonus ? set.medalsBonus : 0}</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    ) : null;\n            })\n        }\n\n        return solutions;\n    };\n\n    render() {\n        return (\n            <div className=\"col-12 col-md-9 left-box mt-2 mb-3\">\n                {this.props.optimiser ? (\n                    <Fragment>\n                        <div className=\"row mt-1 mb-2 text-white justify-content-around\">\n                            <label className=\"col-3 col-sm-2 p-0\" htmlFor=\"nbArts\">\n                                <span>Artifact Slots</span>\n                                <input\n                                    className=\"form-control text-center\"\n                                    aria-label=\"Maximum number of arts\"\n                                    id=\"nbArts\"\n                                    name=\"nbArts\"\n                                    type=\"number\"\n                                    onChange={this.props.optimiserNbArts}\n                                    defaultValue={this.props.wantedArts === 0 ? '' : this.props.wantedArts}\n                                    max={100}\n                                    min={0}\n                                    placeholder={0}\n                                    onKeyUp={(e) => this.triggerBuild(e)}\n                                />\n                            </label>\n                            <label className=\"col-5 col-sm-3 p-0\" htmlFor=\"maxGS\">\n                                <span>Max Game Speed Wanted</span>\n                                <input\n                                    className=\"form-control text-center\"\n                                    aria-label=\"Maximum game speed\"\n                                    id=\"maxGS\"\n                                    name=\"maxGS\"\n                                    type=\"number\"\n                                    onChange={this.props.optimiserMaxGS}\n                                    defaultValue={this.props.maxGS === 0 ? '' : this.props.maxGS}\n                                    min={0}\n                                    placeholder={0}\n                                    step={25}\n                                    onKeyUp={(e) => this.triggerBuild(e)}\n                                />\n                            </label>\n                            <button\n                                id=\"submitBuild\"\n                                className=\"col-2 col-sm-3 btn btn-outline-warning\"\n                                onClick={this.props.startBuild}>\n                                Build !\n                            </button>\n                        </div>\n                        {this.props.getOptimisedResults.length > 0 ? (\n                            <div className=\"row justify-content-center set-border px-3\">\n                                {this.props.getOptimisedResults[0]}\n                                {this.getOptimisedResults()}\n                            </div>\n                        ) : null}\n                    </Fragment>\n                ) : null}\n                <div className=\"row mt-1\">\n                    {this.props.setsData}\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { ArtsBox } from './ArtsBox';\nimport arrow from '../img/arrow.svg';\n\nexport class StatsSummaryAndArtsBox extends Component {\n    static propTypes = {\n        totalNumberOfArts: PropTypes.number.isRequired,\n        gameSpeedBonuses: PropTypes.number.isRequired,\n        bonusMedals: PropTypes.number.isRequired,\n        selectedList: PropTypes.array.isRequired,\n        setsData: PropTypes.array.isRequired,\n        offline: PropTypes.string.isRequired,\n        optimiser: PropTypes.bool.isRequired,\n        optimiserNbArts: PropTypes.func.isRequired,\n        optimiserMaxGS: PropTypes.func.isRequired,\n        startBuild: PropTypes.func.isRequired,\n        wantedArts: PropTypes.number.isRequired,\n        maxGS: PropTypes.number.isRequired,\n        getOptimisedResults: PropTypes.array.isRequired,\n        getArrayResult: PropTypes.func.isRequired,\n        optimisedResultSelectedIndex: PropTypes.number.isRequired,\n        connected: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fullStatsMobile: false,\n        }\n    }\n\n    render() {\n        const offline = this.props.offline !== '' ? (\n            <div className=\"p-1 small alert-danger\">\n                <span className=\"text-center\">\n                    {this.props.offline}\n                </span>\n            </div>\n        ) : null;\n\n        const listContent = (\n            <div className=\"pl-1 pr-1\">\n                <table className=\"table table-bordered table-striped\">\n                    <tbody>\n                        <tr>\n                            <th>Number of arts</th>\n                            <th>Total game speed bonus</th>\n                            <th>Total bonus medals</th>\n                        </tr>\n                        <tr className=\"bolded\">\n                            <td>{this.props.totalNumberOfArts}</td>\n                            <td>{this.props.gameSpeedBonuses}</td>\n                            <td>{this.props.bonusMedals}</td>\n                        </tr>\n                    </tbody>\n                </table>\n                <h3 className=\"col-12 mt-3\">List of selected sets</h3>\n                <table className=\"table table-bordered table-striped\">\n                    <tbody>\n                        {this.props.selectedList.length > 0 ? this.props.selectedList :\n                            (\n                                <tr>\n                                    <th>None</th>\n                                </tr>\n                            )}\n                    </tbody>\n                </table>\n            </div>\n        );\n\n        return (\n            <Fragment>\n                <div className=\"sticky-top\">\n                    <div className={`screenstats bordered row text-center d-block d-md-none pt-3 ${this.state.fullStatsMobile ? 'full-height' : null}`}>\n                        {offline}\n                        <h1 className=\"col-12\">Stats Summary</h1>\n                        {listContent}\n                    </div>\n                    <div\n                        className={`col-4 d-block d-md-none arrow ${this.state.fullStatsMobile ? 'rotate-180' : ''}`}\n                        onClick={() => this.setState({ fullStatsMobile: !this.state.fullStatsMobile })}>\n                        <img src={arrow} alt={this.state.fullStatsMobile ? 'See Less' : 'See More'} />\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <ArtsBox\n                        optimiser={this.props.optimiser}\n                        setsData={this.props.setsData}\n                        optimiserNbArts={this.props.optimiserNbArts}\n                        optimiserMaxGS={this.props.optimiserMaxGS}\n                        startBuild={this.props.startBuild}\n                        getOptimisedResults={this.props.getOptimisedResults}\n                        wantedArts={this.props.wantedArts}\n                        maxGS={this.props.maxGS}\n                        getArrayResult={this.props.getArrayResult}\n                        optimisedResultSelectedIndex={this.props.optimisedResultSelectedIndex}\n                    />\n                    <div className=\"not-connected d-none d-md-block\" style={{ marginTop: this.props.connected ? '' : '8em' }}>\n                        {offline}\n                    </div>\n                </div>\n                <div id=\"capture\" className=\"right-box d-none d-md-block pt-1\" style={{ marginTop: this.props.connected ? '8em' : '10em' }}>\n                    <h1 className=\"bolded pr-2 pl-2\">Stats Summary</h1>\n                    {listContent}\n                </div>\n            </Fragment >\n        )\n    }\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class LoadingScreen extends Component {\n    static propTypes = {\n        // visitorCount: PropTypes.number,\n        offline: PropTypes.string.isRequired,\n    };\n\n    // Keeping it in case of visitor counter again at some time\n    // randomVisitorSentence = () => {\n    //     let v = `Visitor ${this.props.visitorCount}`;\n    //     let sentencesArray = [];\n    //     sentencesArray.push(`Yaaaaarrhhhhh ! ${v} ! DO WHAT YOU WANT CAUSE A PIRATE IS FREE ! YOU ARE A PIRATE !`);\n    //     sentencesArray.push(`Kawaaaaiiiii ${v} !`);\n    //     sentencesArray.push(`Omae wa mou shinderu ${v}. `);\n    //     sentencesArray.push(`May the SR be with you, ${v}.`);\n    //     sentencesArray.push(`All your base are belong to us, ${v} !`);\n    //     sentencesArray.push(`Thank you ${v} ! But our Princess is in another castle !`);\n    //     sentencesArray.push(`It's a-me ! ${v} !`);\n    //     sentencesArray.push(`I used to be an adventurer like you, ${v}, until I took an arrow to the knee.`);\n    //     sentencesArray.push(`${v}, do a barrel roll !`);\n    //     sentencesArray.push(`Praise the sun ${v} !`);\n    //     sentencesArray.push(`The cake is a lie  ${v} !`);\n    //     sentencesArray.push(`${v} JEEEENNKKIIIINNNNS !`);\n    //     sentencesArray.push(`${v}, it's time to kick ass and chew bubble gum, and I'm all outta gum !`);\n    //     let randomIndex = Math.floor(Math.random() * Math.floor(sentencesArray.length));\n    //     if (this.props.visitorCount) {\n    //         return (\n    //             <h3>{sentencesArray[randomIndex]}</h3>\n    //         )\n    //     }\n    // };\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"loading bolded white-text\">\n                    <h1 className=\"col-12 mt-5\">Loading...</h1>\n                    {this.props.offline !== '' ? (\n                        <div className=\"col mt-5\">\n                            {this.props.offline}\n                        </div>) : null}\n                </div>\n            </div>\n        )\n    }\n}","export const calculateMedalsFromEnhancement = (bonusMedals, elvl) => {\n    return bonusMedals + ((bonusMedals / 2) * elvl);\n};\n\nexport const calculateGSFromEnhancement = (bonusGS, artLevel, trans, elvl, setType) => {\n    if (!bonusGS) {\n        return 0;\n    };\n\n    const eightStarsSetIsAirship = (setType.match(/Airship/g) && artLevel === '8*');\n\n    function getGS(GSArrays, bonusGS, elvl, eightStarsSetIsAirship) {\n        const GSValues = eightStarsSetIsAirship ? GSArrays[2] : bonusGS === GSArrays[0][0] ? GSArrays[0] : GSArrays[1];\n        return GSValues[elvl];\n    };\n\n    // Each number is the elvl equivalent\n    // There are 2 arrays because sets GS are divided by 2 different start values\n    // 8* is a special case because for some reason, airships and usual gs sets start with the same value (#thankYouEkkor...)\n    const defaultStartGSValues = {\n        \"6*\": {\n            T0: [[15, 17, 19, 0, 0, 0], [25, 28, 32, 0, 0, 0]],\n            T1: [[22, 25, 28, 0, 0, 0], [37, 42, 47, 0, 0, 0]],\n            T2: [[26, 29, 33, 0, 0, 0], [45, 51, 57, 0, 0, 0]],\n            T3: [[27, 31, 34, 0, 0, 0], [46, 52, 58, 0, 0, 0]],\n        },\n        \"7*\": {\n            T0: [[23, 26, 30, 33, 0, 0], [37, 43, 48, 54, 0, 0]],\n            T1: [[28, 32, 36, 41, 0, 0], [38, 44, 49, 55, 0, 0]],\n            T2: [[30, 35, 39, 44, 0, 0], [50, 58, 65, 73, 0, 0]],\n            T3: [[33, 41, 44, 74, 0, 0], [51, 59, 66, 74, 0, 0]],\n        },\n        \"8*\": {\n            T0: [[47, 53, 60, 67, 74, 0], [0, 0, 0, 0, 0, 0], [47, 53, 59, 65, 73], 0],\n            T1: [[51, 59, 66, 74, 77, 0], [0, 0, 0, 0, 0, 0], [49, 55, 61, 67, 75], 0],\n            T2: [[54, 62, 69, 77, 80, 0], [0, 0, 0, 0, 0, 0], [52, 60, 67, 75, 77], 0],\n        },\n        \"9*\": {\n            T0: [[52, 60, 67, 75, 78, 81], [51, 58, 64, 71, 77, 80]],\n            T1: [[55, 63, 70, 78, 81, 84], [54, 62, 69, 77, 80, 83]],\n        }\n    };\n\n    return getGS(defaultStartGSValues[artLevel][trans], bonusGS, elvl, eightStarsSetIsAirship);\n};\n\n// Making a filter method upon existing sets to get the most powerfull ones\nexport const filterSets = (\n    sets, findBonus, excludedFromOptimiser = [], artLevels, sixStarsLevel = 'T3', sevenStarsLevel = 'T3', eightStarsLevel = 'T2',\n    nineStarsLevel = 'T1'\n) => {\n    // Flatting arrays and filtering sets\n    let unifiedArray = [];\n    sets.map(setArray => {\n        return setArray.map(set => {\n            const setLevel = set.setLevel;\n            const artLevel = set.artifact1.art_level.replace('*', '');\n            const setName = set.set_name.replace(/ \\(\\dp\\)/g, '');\n\n            return !artLevel.match(artLevels) ? null :\n                (setLevel === sixStarsLevel &&\n                    artLevel === '6' &&\n                    excludedFromOptimiser.indexOf(setName) === -1) ? unifiedArray.push(set) :\n                    (setLevel === sevenStarsLevel &&\n                        artLevel === '7' &&\n                        excludedFromOptimiser.indexOf(setName) === -1) ? unifiedArray.push(set) :\n                        (setLevel === eightStarsLevel &&\n                            artLevel === '8' &&\n                            excludedFromOptimiser.indexOf(setName) === -1) ? unifiedArray.push(set) :\n                            (setLevel === nineStarsLevel &&\n                                artLevel === '9' &&\n                                excludedFromOptimiser.indexOf(setName) === -1) ? unifiedArray.push(set) : null;\n        })\n    });\n\n\n    // Filtering sets to retreive only usefull data\n    // Goal is to have lighter data to use with algorithm later\n    let objectStyle = [];\n    unifiedArray.map(set => {\n        const bonusGSValue = findBonus(set, /Game Speed/) ? findBonus(set, /Game Speed/) : 0;\n        const bonusMedalsValue = findBonus(set, /Increase Additional Medals Obtained/) ? findBonus(set, /Increase Additional Medals Obtained/) : 0;\n\n        const avgGSByNBArts = bonusGSValue / set.set_arts_number;\n        const fullSet = set.set_arts_number === set.set_total_arts_number;\n\n        // Since GS and Medals Bonus are most important bonus, save those sets and flush the rest\n        return bonusGSValue || bonusMedalsValue ?\n            objectStyle.push({\n                'setType': set.setType,\n                'setLevel': set.setLevel,\n                'set_name': set.set_name.replace(/ \\(\\dp\\)/g, ''),\n                // 'set_name': set.set_name,\n                'set_tech_name': set.set_tech_name,\n                'set_arts_number': set.set_arts_number,\n                'set_total_arts_number': set.set_total_arts_number,\n                'bonusGS': bonusGSValue,\n                'calculatedBonusGS': bonusGSValue ?\n                    fullSet ? calculateGSFromEnhancement(bonusGSValue, set.artifact1.art_level, set.setLevel, set.enhance_level, set.setType) : bonusGSValue : 0,\n                'bonusMedals': bonusMedalsValue,\n                'calculatedBonusMedals': bonusMedalsValue ?\n                    fullSet ? calculateMedalsFromEnhancement(bonusMedalsValue, set.enhance_level) : bonusMedalsValue : 0,\n                'avgGS': avgGSByNBArts,\n                'enhance_level': set.enhance_level ? set.enhance_level : 0,\n                'artifact1': set.artifact1,\n            }) : null;\n    });\n\n    // Sorting each set by its GS/NbArt ratio\n    return objectStyle.sort((set1, set2) => {\n        return (set1.avgGS - set2.avgGS) * -1;\n    });\n};\n\n// BASE KNAPSACK CODE AT\n// https://gist.github.com/lqt0223/21f033450a9d762ce8aee4da336363b1\n\n// KNAPSACK ALGORITHM MODIFIED A BIT TO FIT THE APP NEEDS\nexport const knapsack = (\n    sets, maxArts, maxGS, minMedalsPerSet, findBonus, excludedFromOptimiser, artLevels, sixStarsLevel, sevenStarsLevel, eightStarsLevel,\n    nineStarsLevel,\n) => {\n    function getSolution(row, nbArts, maxGS, minMedalsPerSet, memo) {\n        const NO_SOLUTION = { totalArts: 0, gameSpeed: 0, medalsBonus: 0, sets: [] };\n\n        const col = nbArts - 1;\n        const lastItem = sets[row];\n\n        const remaining = nbArts - lastItem.set_arts_number;\n\n        const lastSolution = row > 0 ? memo[row - 1][col] || NO_SOLUTION : NO_SOLUTION;\n        const lastSubSolution = row > 0 ? memo[row - 1][remaining - 1] || NO_SOLUTION : NO_SOLUTION;\n\n        // If any one of the set has too much artifacts, return the last solution\n        if (remaining < 0) {\n            return lastSolution;\n        }\n\n        // Since a set cannot be counted twice (i.e: 2p, 4p and full set), we check if one of its combinaison has already been selected\n        // If not, we keep it\n        // If yes, we filter all sets matching and push them in a separate array (we would lose them else)\n        const lastItemName = lastItem.set_name;\n\n        let filteredSets = [];\n\n        lastSubSolution.sets = lastSubSolution.sets.filter(set => {\n            const currentSetName = set.set_name;\n\n            if (currentSetName === lastItemName) {\n                filteredSets.push(set);\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        // If a set was already existing, the last solution hasn't changed so we don't need to go further.\n        // Simply push the first one again and return the solution\n        if (filteredSets[0]) {\n            lastSubSolution.sets.push(filteredSets[0]);\n            return lastSubSolution;\n        }\n\n        const lastGSValue = lastSolution.gameSpeed;\n        const lastMedalsValue = lastSolution.medalsBonus;\n\n        const lastItemMedals = lastItem.calculatedBonusMedals;\n\n        const newMaxArts = lastSubSolution.totalArts + lastItem.set_arts_number;\n        const newGSValue = lastSubSolution.gameSpeed + lastItem.calculatedBonusGS;\n        const newMedalsValue = lastSubSolution.medalsBonus + lastItem.calculatedBonusMedals;\n\n        if ((newGSValue >= lastGSValue && newMedalsValue > lastMedalsValue && newGSValue <= maxGS && lastItemMedals >= minMedalsPerSet)) {\n            const _lastSets = lastSubSolution.sets.slice();\n            _lastSets.push(lastItem);\n            return { totalArts: newMaxArts, gameSpeed: newGSValue, medalsBonus: newMedalsValue, sets: _lastSets };\n        } else {\n            return lastSolution;\n        }\n    }\n\n    // The right-bottom-corner cell of the grid contains the final solution for the whole problem.\n    // It looks like last cell is not always the best one ? Probably related to double condition check in loops...\n    // Getting each memo best results then\n    function getLastOfEach(memo) {\n        const memoResults = [];\n\n        memo.map(memoArray => {\n            return memoResults.push(memoArray[memoArray.length - 1]);\n        });\n\n        memoResults.sort((r1, r2) => r1.totalArts >= r2.totalArts && r1.gameSpeed >= r2.gameSpeed && r1.medalsBonus >= r2.medalsBonus ? -1 : 1);\n\n        return memoResults[0];\n        // const lastRow = memo[memo.length - 1];\n        // return lastRow[lastRow.length - 1];\n    }\n\n    sets = filterSets(sets, findBonus, excludedFromOptimiser, artLevels, sixStarsLevel, sevenStarsLevel, eightStarsLevel, nineStarsLevel);\n\n    let results = [];\n    // Creating loop to make multiple knapsacks\n    for (let medals = 0; medals <= minMedalsPerSet; medals += 50) {\n        // Filling the sub-problem solutions grid.\n        let memo = [];\n        for (let set = 0; set < sets.length; set++) {\n            // Variable 'nbArts' is the maxArts for sub-problems.\n            let row = [];\n            for (let nbArts = 1; nbArts <= maxArts; nbArts++) {\n                row.push(getSolution(set, nbArts, maxGS, medals, memo));\n            }\n            memo.push(row);\n        }\n\n        if (memo.length > 0) {\n            // Push every knapsack best result to results\n            results.push(getLastOfEach(memo));\n        } else {\n            results.push([]);\n        }\n    }\n\n    // Stringify objects to make comparison easier (every object is set the same way, making this check safe)\n    if (maxArts > 0) {\n        results = results.map(set => {\n            return JSON.stringify(set);\n            // return set.totalArts === maxArts && maxArts > 1 ? JSON.stringify(set) : null;\n        });\n    } else {\n        return [];\n    }\n\n    // Creating filtered results and a seen index arrays\n    let filteredResults = [];\n    let seen = [];\n\n    results.map(set => {\n        // If set has not been seen yet, his index will be -1 so we can safely save it to results\n        // This will avoid any doubled result\n        if (seen.indexOf(results.indexOf(set)) === -1 && set !== null) {\n            seen.push(results.indexOf(set));\n            // Save and parse back the set to JSON object\n            return filteredResults.push(JSON.parse(set));\n        } else {\n            return null;\n        }\n    });\n\n    // Sorting output by medals value\n    return filteredResults.sort((set1, set2) => set1.gameSpeed >= set2.gameSpeed ? -1 : 1);\n};\n","// export const defaultSort = (data) => {\n//     return data\n// }\nfunction indexSwaps(sort) {\n    return sort === 'ASC' ? [1, -1, 0] : [-1, 1, 0];\n}\n\nfunction getGS(set, findBonus) {\n    return findBonus(set, /Game Speed/) ? findBonus(set, /Game Speed/) : 0;\n}\n\nfunction getMedals(set, findBonus) {\n    return findBonus(set, /Increase Additional Medals Obtained/) ? findBonus(set, /Increase Additional Medals Obtained/) : 0;\n}\n\nexport const artsPerSetSort = (data, sort) => {\n    // For ASC and DESC sorting\n    const swaps = indexSwaps(sort);\n\n    return data.sort((a, b) => {\n        return a[0].set_total_arts_number > b[0].set_total_arts_number ?\n            swaps[0] : b[0].set_total_arts_number > a[0].set_total_arts_number ? swaps[1] : swaps[2]\n    })\n};\n\n\nexport const alphabeticalSort = (data, sort) => {\n    // For ASC and DESC sorting\n    const swaps = indexSwaps(sort);\n\n    return data.sort((a, b) => {\n        return a[0].set_tech_name > b[0].set_tech_name ?\n            swaps[0] : b[0].set_tech_name > a[0].set_tech_name ? swaps[1] : swaps[2]\n    })\n};\n\nexport const GSAmountSort = (data, sort, findBonus) => {\n    // For ASC and DESC sorting\n    const swaps = indexSwaps(sort);\n\n    return data.sort((a, b) => {\n        // Ensure to get the last set to have all set bonuses\n        const GSa = getGS(a[a.length - 1], findBonus);\n        const GSb = getGS(b[b.length - 1], findBonus);\n\n        return GSa > GSb ? swaps[0] : GSb > GSa ? swaps[1] : swaps[2]\n    })\n};\n\nexport const MedalsAmountSort = (data, sort, findBonus) => {\n    // For ASC and DESC sorting\n    const swaps = indexSwaps(sort);\n\n    return data.sort((a, b) => {\n        // Ensure to get the last set to have all set bonuses\n        const medalsA = getMedals(a[a.length - 1], findBonus);\n        const medalsB = getMedals(b[b.length - 1], findBonus);\n\n        return medalsA > medalsB ? swaps[0] : medalsB > medalsA ? swaps[1] : swaps[2]\n\n    })\n};\n","import React, { Component, Fragment } from 'react';\nimport * as html2canvas from 'html2canvas';\nimport Set from './component/Set';\nimport { ScreenshotModal } from './Modals/ScreenshotModal';\nimport { NavBar } from './component/NavBar';\nimport { StatsSummaryAndArtsBox } from './component/StatsSummaryAndArtsBox';\nimport { LoadingScreen } from './component/LoadingScreen';\nimport { calculateGSFromEnhancement, calculateMedalsFromEnhancement, knapsack } from './optimiser/Optimiser';\nimport { artsPerSetSort, alphabeticalSort, GSAmountSort, MedalsAmountSort } from './sorting/SortingSets';\nimport { versions } from './Versions/Versions';\n\n\nexport default class App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedList: [],\n            data: [],\n            excludedFromOptimiser: [],\n            setTypes: [],\n            totalNumberOfArts: [],\n            gameSpeedBonuses: [],\n            bonusMedals: [],\n            bonusTypes: ['All', 'Game Speed', 'Increase Additional Medals Obtained'],\n            artsLevels: [6, 7, 8, 9],\n            setsLevels: ['T0', 'T1', 'T2', 'T3'],\n            artsLevelsOptimized: /[6-9]/g,\n            sixStarsSetsOptimized: /T[0-2]/g, // NB: Regex to EXCLUDE set\n            sevenStarsSetsOptimized: /T[0-2]/g,\n            eightStarsSetsOptimized: /T[0-1]/g,\n            nineStarsSetsOptimized: /T[0]/g,\n            enhancementModes: ['Manual', 'All'],\n            enhancementMode: 'Manual',\n            enhancementLevels: [0, 1, 2, 3, 4, 5],\n            enhanceLevel: 5,\n            maxArtsPerSet: 6,\n            set: null,\n            artifact: null,\n            showScreenModal: false,\n            canvas: null,\n            canvasMobile: null,\n            searchBySetName: '',\n            searchBySetType: 'All',\n            filterByBonusType: 'All',\n            filterBySetLevel: 'All',\n            filterByTotalArtsNumber: 'All',\n            sorts: ['Arts per Set', 'Alphabetical', 'GS Amount', 'Medals Amount'],\n            sortedBy: 'Default',\n            loading: false,\n            // visitorCount: null,\n            offline: '',\n            optimiser: true,\n            optimiserNbArts: 0,\n            optimiserMaxGS: 0,\n            optimiserSixStarsLevel: 'T3',\n            optimiserSevenStarsLevel: 'T3',\n            optimiserEightStarsLevel: 'T2',\n            optimiserNineStarsLevel: 'T1',\n            optimisedSets: [],\n            optimisedResultSelectedIndex: 1,\n            connected: false,\n        };\n    }\n\n    UNSAFE_componentWillMount() {\n        if (!localStorage.getItem('enhanceLevel')) {\n            localStorage.setItem('enhanceLevel', 5);\n        }\n\n        const enhanceLevel = parseInt(localStorage.getItem('enhanceLevel'), 10);\n\n        this.setState({ loading: true, enhanceLevel: enhanceLevel });\n\n        fetch(process.env.REACT_APP_PING)\n            .then(response => {\n                // Used to catch if user isn't connected at all\n                return response.status;\n            })\n            .then(() => {\n                // Check current user version to decide if we will use stored data\n                const versionNumberFromLocalStorage = localStorage.getItem('versionNumber');\n                // Get latest version number\n                const currentVersion = versions[0].number;\n\n                // Used to show facebook button\n                this.setState({ connected: true });\n\n                // If the stored version in localStorage is different or we are in dev, fetch new data\n                if (versionNumberFromLocalStorage !== currentVersion || process.env.NODE_ENV === 'development') {\n                    // Checking if user can fetch latest data\n\n                    fetch(process.env.REACT_APP_SETS_FETCH)\n                        .then(response => {\n                            return response.json()\n                        })\n                        .then(data => {\n                            // Sorting 2 dimensions array to sort arts by their names\n                            localStorage.setItem('data', '');\n                            localStorage.setItem('setTypes', '');\n                            let sortedData = [];\n                            let pushInArray = [];\n                            let setTypesArray = ['All'];\n\n                            let i = 0;\n                            while (i < data.length) {\n                                // Add a 0 on set types that are under 10\n                                const dataSetTypeSplit = data[i].setType.split(' ');\n                                if (parseInt(dataSetTypeSplit[0], 10) < 10) {\n                                    data[i].setType = '0' + data[i].setType;\n                                }\n\n                                let setType = data[i].setType.replace(/\\d+ /, '');\n\n                                data[i].enhance_level = this.adaptElvl(data[i], enhanceLevel);\n\n                                if (!setTypesArray.includes(setType)) {\n                                    setTypesArray.push(setType);\n                                }\n\n                                // If next index exists\n                                if (data[i + 1]) {\n                                    // Push this index into array pushInArray\n                                    pushInArray.push(data[i]);\n                                    // If set name of the actual set is not the same than next set name, excluding (*p)\n                                    if (data[i].set_name.match(/(.*)[^ (\\dp)]/g)[0] !== data[i + 1].set_name.match(/(.*)[^ (\\dp)]/g)[0]) {\n                                        // Pushing pushInArray into sortedData\n                                        sortedData.push(pushInArray);\n                                        // Reseting pushInArray\n                                        pushInArray = [];\n                                    }\n                                } else {\n                                    pushInArray.push(data[i]);\n                                    sortedData.push(pushInArray);\n                                }\n                                i++;\n                            }\n\n                            // Sorting every index (array of sets) by arts number then resort by setLevel to ensure every array last index is the \"best\" set\n                            sortedData.map(x => {\n                                let sortByArtNumber = x.sort((a, b) => {\n                                    return (a.set_arts_number > b.set_arts_number) ? 1 : ((b.set_arts_number > a.set_arts_number) ? -1 : 0)\n                                });\n\n                                return sortByArtNumber.sort((a, b) => {\n                                    return (a.setLevel > b.setLevel) ? 1 : ((b.setLevel > a.setLevel) ? -1 : 0)\n                                })\n                            });\n\n                            // Quick ensure our sets are sorted by their setType (DESC, higher number will be at top)\n                            sortedData.sort((a, b) => b[0].setType.localeCompare(a[0].setType));\n\n                            localStorage.setItem('data', JSON.stringify(sortedData));\n                            localStorage.setItem('setTypes', JSON.stringify(setTypesArray));\n                            this.setState({\n                                data: JSON.parse(localStorage.getItem('data')),\n                                defaultData: JSON.parse(localStorage.getItem('data')),\n                                setTypes: JSON.parse(localStorage.getItem('setTypes')),\n                                loading: false,\n                            });\n                            localStorage.setItem('versionNumber', currentVersion);\n                        })\n                        .catch(() => {\n                            this.checkOfflineAndLocalStorage('There has been a problem while loading data. Please try again later.', enhanceLevel);\n                        })\n                } else {\n                    this.getDataFromLocalStorage(enhanceLevel);\n                }\n            })\n            .catch(() => {\n                this.checkOfflineAndLocalStorage('You need to connect at least once to run this app.', enhanceLevel);\n            })\n    };\n\n    getDataFromLocalStorage = (enhanceLevel) => {\n        // Setting sets enhance_level from localStorage value\n        let data = JSON.parse(localStorage.getItem('data')).map(sets => {\n            return sets.map(set => {\n                set.enhance_level = enhanceLevel;\n                return set;\n            })\n        });\n\n        // this.sortDataBySetType(data);\n\n        return this.setState({\n            data: data,\n            defaultData: data,\n            setTypes: JSON.parse(localStorage.getItem('setTypes')),\n            loading: false,\n        });\n    }\n\n    checkOfflineAndLocalStorage = (message, enhanceLevel) => {\n        if (localStorage.getItem('data') && localStorage.getItem('setTypes')) {\n            this.getDataFromLocalStorage(enhanceLevel);\n            return this.setState({\n                offline: 'You are currently offline, data may be outdated.',\n            })\n        } else {\n            return this.setState({\n                offline: message,\n            });\n        }\n    };\n\n    sortingASCorDESC = (btnValue, method, findBonus = null) => {\n        return btnValue.match(/ ASC/) ?\n            this.setState({ data: method(this.state.data, 'ASC', findBonus), sortedBy: btnValue }) :\n            this.setState({ data: method(this.state.data, 'DESC', findBonus), sortedBy: btnValue });\n    };\n\n    sortingMethod = (btnValue) => {\n        return btnValue.match('Arts per Set') ?\n            this.sortingASCorDESC(btnValue, artsPerSetSort) : btnValue.match('Alphabetical') ?\n                this.sortingASCorDESC(btnValue, alphabeticalSort) : btnValue.match('GS Amount') ?\n                    this.sortingASCorDESC(btnValue, GSAmountSort, this.findBonus) : btnValue.match('Medals Amount') ?\n                        this.sortingASCorDESC(btnValue, MedalsAmountSort, this.findBonus) : this.setState({ data: this.state.defaultData });\n    };\n\n    sortingButtons = (btnValue) => {\n        return (\n            <Fragment>\n                <input\n                    id={btnValue + 'sorting'}\n                    type=\"radio\"\n                    name={'totalArtsPerSet'}\n                    value={btnValue + (btnValue === 'Default' ? '' : ' ASC')}\n                    defaultChecked={btnValue + (btnValue === 'Default' ? '' : ' ASC') === this.state.sortedBy}\n                    onClick={(e) => this.sortingMethod(e.target.value)}\n                />\n                <label htmlFor={btnValue + 'sorting'}\n                    className={`col mb-2 set-filter-button radio-btn personnal-checkbox green-check filter-modal`}>\n                    {btnValue + (btnValue === 'Default' ? '' : ' ASC')}\n                </label>\n                {btnValue !== 'Default' ? (\n                    <Fragment>\n                        <input\n                            id={btnValue + 'sortingRevert'}\n                            type=\"radio\"\n                            name={'totalArtsPerSet'}\n                            value={btnValue + ' DESC'}\n                            defaultChecked={btnValue + ' DESC' === this.state.sortedBy}\n                            onClick={(e) => this.sortingMethod(e.target.value)}\n                        />\n                        <label htmlFor={btnValue + 'sortingRevert'}\n                            className={`col mb-2 ml-2 set-filter-button radio-btn personnal-checkbox green-check filter-modal`}>\n                            {btnValue} DESC\n                        </label>\n                    </Fragment>\n                ) : null}\n\n            </Fragment>\n        )\n    };\n\n    setsSortingButtons = () => {\n        const boxes = [];\n        const sorts = this.state.sorts;\n\n        // Default sorting button\n        boxes.push(\n            <div key='Defaultsorting' className=\"row mx-auto\">\n                {this.sortingButtons('Default')}\n            </div>\n        );\n\n        for (let i = 0; i < sorts.length; i++) {\n            boxes.push(\n                <div key={sorts[i] + 'sorting'} className=\"row mx-auto\">\n                    {this.sortingButtons(sorts[i])}\n                </div>);\n        }\n\n        return boxes;\n    };\n\n    resetSummaryState = () => {\n        this.setState({\n            selectedList: [],\n            totalNumberOfArts: [],\n            gameSpeedBonuses: [],\n            bonusMedals: [],\n        });\n\n        // Default checking every \"X\" radio input (\"reset\")\n        const radioInputsList = document.querySelectorAll('.row.container-fluid.mx-auto>input');\n        radioInputsList.forEach(input => input.checked = true)\n    };\n\n    handleList = (event, status = null, elvl, globalArray) => {\n        const regex = / \\(\\dp\\)/;\n        const eventSetName = event.set_name.replace(regex, '');\n        const selectedList = this.state.selectedList;\n        const isInList = selectedList.some(set => set.set_name.replace(regex, '') === eventSetName);\n\n        let setNamesArray = []; // create an array that will contains cleaned set names for easier match\n        selectedList.map(set => setNamesArray.push(set.set_name.replace(regex, '')));\n        let index = setNamesArray.indexOf(eventSetName);\n\n        if (status === 'enhance') {\n            if (event.set_arts_number === event.set_total_arts_number) {\n                event.enhance_level = !isNaN(elvl) ? parseInt(elvl, 10) : !isNaN(event.enhance_level) ? parseInt(event.enhance_level) : 0;\n            }\n            this.changeSetEnhanceLevel(elvl, globalArray);\n        }\n\n        const oldSet = selectedList[index];\n\n        if (isInList || (isInList && status === 'remove')) {\n            // Use index got to clean arrays\n            let array = this.state.selectedList;\n            array.splice(index, 1);\n            let array2 = this.state.totalNumberOfArts;\n            array2.splice(index, 1);\n            let array3 = this.state.gameSpeedBonuses;\n            array3.splice(index, 1);\n            let array4 = this.state.bonusMedals;\n            array4.splice(index, 1);\n\n            this.setState({\n                selectedList: array,\n                totalNumberOfArts: array2,\n                gameSpeedBonuses: array3,\n                bonusMedals: array4\n            });\n        }\n\n        // Direct set selection\n        if (status === 'select') {\n            const fullSet = event.set_arts_number === event.set_total_arts_number;\n            const findBonusMedalsMethod = this.findBonus(event, /Increase Additional Medals Obtained/);\n            const findBonusGSMethod = this.findBonus(event, /Game Speed/);\n\n            const bonusMedals = fullSet ?\n                calculateMedalsFromEnhancement(findBonusMedalsMethod, event.enhance_level) : findBonusMedalsMethod;\n            const bonusGS = fullSet ?\n                calculateGSFromEnhancement(findBonusGSMethod, event.artifact1.art_level, event.setLevel, event.enhance_level, event.setType) : findBonusGSMethod;\n\n            this.setState(prevState => ({\n                selectedList: [...prevState.selectedList, event],\n                totalNumberOfArts: [...prevState.totalNumberOfArts, event.set_arts_number],\n                gameSpeedBonuses: [...prevState.gameSpeedBonuses, bonusGS],\n                bonusMedals: [...prevState.bonusMedals, bonusMedals]\n            }));\n        }\n        // Enhancement selection\n        else if (status === 'enhance' && oldSet) {\n            const fullSet = oldSet.set_arts_number === oldSet.set_total_arts_number;\n            oldSet.enhance_level = event.enhance_level;\n\n            let bonusMedals = 0;\n            let bonusGS = 0;\n\n            if (!isNaN(oldSet.bonusMedals) || !isNaN(oldSet.bonusGS)) {\n                if (fullSet) {\n                    oldSet.calculatedBonusMedals = calculateMedalsFromEnhancement(oldSet.bonusMedals, oldSet.enhance_level);\n                    oldSet.calculatedBonusGS = calculateGSFromEnhancement(oldSet.bonusGS, oldSet.artifact1.art_level, oldSet.setLevel, oldSet.enhance_level, oldSet.setType);\n                }\n            } else {\n                const findBonusMedalsMethod = this.findBonus(oldSet, /Increase Additional Medals Obtained/);\n                const findBonusGSMethod = this.findBonus(oldSet, /Game Speed/);\n\n                bonusMedals = fullSet ?\n                    calculateMedalsFromEnhancement(findBonusMedalsMethod, oldSet.enhance_level) : findBonusMedalsMethod;\n                bonusGS = fullSet ?\n                    calculateGSFromEnhancement(findBonusGSMethod, oldSet.artifact1.art_level, oldSet.setLevel, oldSet.enhance_level, oldSet.setType) : findBonusGSMethod;\n            }\n\n            this.setState(prevState => ({\n                selectedList: [...prevState.selectedList, oldSet],\n                totalNumberOfArts: [...prevState.totalNumberOfArts, oldSet.set_arts_number],\n                gameSpeedBonuses: [...prevState.gameSpeedBonuses, bonusGS ? bonusGS : oldSet.calculatedBonusGS],\n                bonusMedals: [...prevState.bonusMedals, bonusMedals ? bonusMedals : oldSet.calculatedBonusMedals]\n            }));\n        }\n    };\n\n    handleOptimisedList = (event, status = null) => {\n        const regex = / \\(\\dp\\)/;\n        const eventSetName = event.set_name.replace(regex, '');\n        const isInList = this.state.excludedFromOptimiser.some(setName => setName === eventSetName);\n\n        if (isInList || (isInList && status === 'remove')) {\n            let index = this.state.excludedFromOptimiser.indexOf(eventSetName);\n\n            // Use index got to clean array\n            let array = this.state.excludedFromOptimiser;\n            array.splice(index, 1);\n\n            this.setState({ excludedFromOptimiser: array });\n        }\n        if (!status) {\n            this.setState(prevState => ({ excludedFromOptimiser: [...prevState.excludedFromOptimiser, eventSetName] }));\n        }\n    };\n\n    sum = (input) => {\n        if (toString.call(input) !== \"[object Array]\") {\n            return false;\n        }\n\n        let total = 0;\n        for (let i = 0; i < input.length; i++) {\n            if (isNaN(input[i])) {\n                continue;\n            }\n            total += Number(input[i]);\n        }\n        return total;\n    };\n\n    findBonus = (event, regex) => {\n        for (let key in event) {\n            if (event.hasOwnProperty(key)) {\n                if (/^bonus/.test(key)) {\n                    if (event[key].match(regex)) {\n                        let valueKey = key.replace('bonus', 'value');\n                        return parseInt(event[valueKey], 10);\n                    }\n                }\n            } else {\n                return 0\n            }\n        }\n    };\n\n    getSelection = (set) => {\n        const fullSet = set.set_arts_number === set.set_total_arts_number;\n        let findGsBonus = !isNaN(set.calculatedBonusGS) ?\n            set.calculatedBonusGS : fullSet ?\n                calculateGSFromEnhancement(this.findBonus(set, /Game Speed/), set.artifact1.art_level, set.setLevel, set.enhance_level, set.setType) :\n                this.findBonus(set, /Game Speed/);\n\n        let findMedalBonus = !isNaN(set.calculatedBonusMedals) ?\n            set.calculatedBonusMedals : fullSet ?\n                calculateMedalsFromEnhancement(this.findBonus(set, /Increase Additional Medals Obtained/), set.enhance_level) : this.findBonus(set, /Increase Additional Medals Obtained/);\n\n        const setTechName = set.set_tech_name.replace(/ \\(\\dp\\)/g, '');\n        const elvl = !isNaN(set.enhance_level) && fullSet && set.enhance_level ? '+' + set.enhance_level : '';\n\n        return (\n            <tr key={set.set_name + set.setLevel} className=\"text-center\">\n                <th style={{ width: '60%' }}>{elvl} {set.setLevel} {setTechName} - {set.set_arts_number}p</th>\n                <td style={{ width: '15%' }}>{findGsBonus ? findGsBonus : 0}</td>\n                <td style={{ width: '35%' }}>{findMedalBonus ? findMedalBonus : 0}</td>\n            </tr>\n        )\n    };\n\n    triggerScreenshot = () => {\n        html2canvas(document.querySelector(\"#capture\"))\n            .then(canvas => {\n                this.setState({ showScreenModal: true, canvas: canvas.toDataURL() });\n            })\n    };\n\n    showIfMatch = (set) => {\n        const setName = set.set_name.toLowerCase().match(this.state.searchBySetName.toLowerCase());\n        const techName = set.set_tech_name.toLowerCase().match(this.state.searchBySetName.toLowerCase());\n        const setType = set.setType.toLowerCase().match(this.state.searchBySetType.toLowerCase()) || this.state.searchBySetType === 'All';\n        const bonus = this.findBonus(set, this.state.filterByBonusType) || this.state.filterByBonusType === 'All';\n        const matchTotalArtsNumber = set.set_total_arts_number.toString() === this.state.filterByTotalArtsNumber || this.state.filterByTotalArtsNumber === 'All';\n\n        // Match set tech name, set types and set total arts number, if All, every set is shown\n        return (setName || techName) && setType && bonus && matchTotalArtsNumber;\n    };\n\n    filterSetsForStatsModal = (set) => {\n        return this.state.data.filter(setsArray => {\n            return setsArray[0].set_name.replace(/ \\(\\dp\\)/g, '') === set.set_name.replace(/ \\(\\dp\\)/g, '')\n        })[0].filter(set1 => {\n            return set1.set_arts_number === set.set_arts_number;\n        }).sort((set1, set2) => {\n            return set1.setLevel >= set2.setLevel ? 1 : -1;\n        });\n    };\n\n    getSets = (sets) => {\n        let globalArray = [];\n        let t0Array = [];\n        let t1Array = [];\n        let t2Array = [];\n        let t3Array = [];\n        sets.map(set => {\n            switch (set.setLevel) {\n                case 'T0':\n                    return t0Array.push(set);\n                case 'T1':\n                    return t1Array.push(set);\n                case 'T2':\n                    return t2Array.push(set);\n                case 'T3':\n                    return t3Array.push(set);\n                default:\n                    return null\n            }\n        });\n        if (t0Array.length > 0) {\n            globalArray.push(t0Array);\n        }\n        if (t1Array.length > 0) {\n            globalArray.push(t1Array);\n        }\n        if (t2Array.length > 0) {\n            globalArray.push(t2Array);\n        }\n        if (t3Array.length > 0) {\n            globalArray.push(t3Array);\n        }\n\n        // Last index is selected to be able to check if the set has any required bonus\n        // to apply filter we need to get the set with maximum bonus\n        let set = sets[sets.length - 1];\n        let showIfMatch = this.showIfMatch(set, false);\n        const filteredSets = this.filterSetsForStatsModal(set);\n        return (\n            <div\n                key={set.set_name}\n                className={`col-md-3 col-6 set-border text-center hovered ${showIfMatch ? '' : 'd-none'}`}>\n                <div className=\"row mt-1\">\n                    <div className=\"col-2 white-text child\" />\n                    <div className=\"col-9\">\n                        <div className=\"row container-fluid mx-auto\">\n                            <input\n                                id={set.set_name}\n                                onClick={() => this.handleList(set, 'remove')}\n                                type=\"radio\"\n                                name={set.set_name.replace(/ \\(\\dp\\)/, '')}\n                                value={set.set_name}\n                                defaultChecked={true}\n                            >\n                            </input>\n                            <label\n                                htmlFor={set.set_name}\n                                className=\"text-center text-color personnal-checkbox red-check w-100\">\n                                &#10007;\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                {globalArray.map((sets, index) => {\n                    // Seems on sets with 1 pair of bonus can't be fetched by sets[index] so\n                    // Setting if/else to get sets[0] in this case\n                    return (\n                        <Fragment key={sets[index] ? sets[index].set_name : sets[0].set_name + index}>\n                            <div className=\"row align-items-center\">\n                                <div className=\"col-2 white-text child\">\n                                    {sets[index] ? sets[index].setLevel : sets[0].setLevel}\n                                </div>\n                                <div className=\"col-9\">\n                                    <div className=\"row\">\n                                        {sets.map(set => this.artsNumber(set, sets))}\n                                    </div>\n                                </div>\n                            </div>\n                            {sets.map(set => this.enhancementButtons(set, globalArray))}\n                        </Fragment>\n                    )\n                }\n                )}\n                <div>\n                    <Set\n                        set={set}\n                        wholeSetForModalStats={filteredSets}\n                    />\n                </div>\n            </div>\n        )\n    };\n\n    enhancementButtons = (set, globalArray) => {\n        const regex = / \\(\\dp\\)/;\n        const artLevel = set.artifact1.art_level;\n        const setLevel = set.setLevel;\n\n        const elvls = artLevel === '6*' ?\n            this.state.enhancementLevels.filter(x => ![3, 4, 5].includes(x)) : artLevel === '7*' ?\n                this.state.enhancementLevels.filter(x => ![4, 5].includes(x)) : artLevel === '8*' ?\n                    this.state.enhancementLevels.filter(x => ![5].includes(x)) : this.state.enhancementLevels; // filter all levels for 9* sets\n\n        const enhanceLevel = this.adaptElvl(set, this.state.enhanceLevel);\n\n        const showElvls = set.hasOwnProperty('enhance_level') &&\n            (\n                (artLevel === '6*' && setLevel === 'T3') ||\n                (artLevel === '7*' && setLevel === 'T3') ||\n                (artLevel === '8*' && setLevel === 'T2') ||\n                (artLevel === '9*' && setLevel === 'T1')\n            ) && set.set_arts_number === set.set_total_arts_number;\n\n        // Must get the whole div in condition and rewrite it completely depending on state\n        // This avoid conflict with controlled/uncontrolled input\n        return showElvls ?\n            this.state.enhancementMode === 'Manual' ? (\n                <div key={set + 'M'}>\n                    <div\n                        className=\"bordered white-text mt-2\">\n                        Enhancement\n                    </div>\n                    <div className=\"row p-0 mx-0 col align-items-center\">\n                        {elvls.map(elvl => {\n                            return (\n                                <Fragment key={elvl + 'enhance'}>\n                                    <input\n                                        id={set.set_name.replace(regex, '') + elvl + 'enhance'}\n                                        type=\"radio\"\n                                        name={set.set_name + 'enhance'}\n                                        value={elvl}\n                                        defaultChecked={elvl === set.enhance_level}\n                                        onClick={(e) => this.handleList(set, 'enhance', e.target.value, globalArray)}\n                                    />\n                                    <label\n                                        htmlFor={set.set_name.replace(regex, '') + elvl + 'enhance'}\n                                        className=\"col p-0 mt-2 text-center text-color personnal-checkbox green-check\">\n                                        +{elvl}\n                                    </label>\n                                </Fragment>\n                            )\n                        }\n                        )}\n                    </div>\n                </div>\n            ) : (\n                    <div key={set + 'A'}>\n                        <div\n                            className=\"text-bolded bordered white-text mt-2\">\n                            Enhancement\n                    </div>\n                        <div className=\"row p-0 mx-0 col align-items-center\">\n                            {elvls.map(elvl => {\n                                return (\n                                    <Fragment key={elvl + 'enhance'}>\n                                        <input\n                                            id={set.set_tech_name + elvl + 'enhance'}\n                                            type=\"radio\"\n                                            name={set.set_name + 'enhance'}\n                                            value={elvl}\n                                            checked={elvl === enhanceLevel}\n                                            readOnly={true}\n                                        />\n                                        <label\n                                            htmlFor={set.set_tech_name + elvl + 'enhance'}\n                                            className=\"col p-0 mt-2 text-center text-color personnal-checkbox green-check\">\n                                            +{elvl}\n                                        </label>\n                                    </Fragment>\n                                )\n                            }\n                            )}\n                        </div>\n                    </div>\n                ) : null;\n    };\n\n    getOptimizedSets = (sets) => {\n        // This function is here to filter and fill ArtsBox only with sets that automatic builder will use\n        const artLevels = this.state.artsLevelsOptimized;\n        const sixStarsSets = this.state.sixStarsSetsOptimized;\n        const sevenStarsSets = this.state.sevenStarsSetsOptimized;\n        const eightStarsSets = this.state.eightStarsSetsOptimized;\n        const nineStarsSets = this.state.nineStarsSetsOptimized;\n\n        sets = sets.filter(set => {\n            const testGSValue = this.findBonus(set, /Game Speed/);\n            const testMedalsValue = this.findBonus(set, /Increase Additional Medals Obtained/);\n            const setLevel = set.setLevel;\n            const artLevel = set.artifact1.art_level.replace('*', '');\n\n            return !artLevel.match(artLevels) || !(testGSValue || testMedalsValue) ? false :\n                !(setLevel.match(sixStarsSets) && artLevel === '6') ?\n                    !(setLevel.match(sevenStarsSets) && artLevel === '7') ?\n                        !(setLevel.match(eightStarsSets) && artLevel === '8') ?\n                            !(setLevel.match(nineStarsSets) && artLevel === '9') : false : false : false;\n        });\n\n        if (sets.length > 0) {\n            const regex = / \\(\\dp\\)/;\n            const set = sets[sets.length - 1];\n            let showIfMatch = this.showIfMatch(set);\n            const filteredSets = this.filterSetsForStatsModal(set);\n            const isExcluded = this.state.excludedFromOptimiser.indexOf(set.set_name) !== -1;\n\n            return (\n                <div\n                    key={set.set_name}\n                    className={`col-md-3 col-6 set-border text-center hovered ${showIfMatch ? '' : 'd-none'}`}>\n                    <div className=\"col white-text child\">\n                        <div className=\"row justify-content-around\">\n                            <input\n                                id={set.set_name + 'x'}\n                                onClick={() => this.handleOptimisedList(set)}\n                                type=\"radio\"\n                                name={set.set_name.replace(regex, '')}\n                                value={set.set_name}\n                                defaultChecked={isExcluded}\n                            >\n                            </input>\n                            <label htmlFor={set.set_name + 'x'}\n                                className=\"col text-center text-color personnal-checkbox red-check\">\n                                &#10007;\n                            </label>\n                            <input\n                                id={set.set_name + 'v'}\n                                onClick={() => this.handleOptimisedList(set, 'remove')}\n                                type=\"radio\"\n                                name={set.set_name.replace(regex, '')}\n                                value={set.set_name}\n                                defaultChecked={!isExcluded}\n                            >\n                            </input>\n                            <label htmlFor={set.set_name + 'v'}\n                                className=\"col ml-2 text-center text-color personnal-checkbox green-check\">\n                                &#10003;\n                            </label>\n                        </div>\n                    </div>\n                    <div>\n                        {this.enhancementButtons(set, sets)}\n                    </div>\n                    <div>\n                        <Set\n                            set={set}\n                            wholeSetForModalStats={filteredSets}\n                        />\n                    </div>\n                </div>\n            )\n        }\n    };\n\n    getSetsTypes = (setType) => {\n        return (\n            <div key={setType}>\n                <input\n                    id={setType + 'setType'}\n                    type=\"radio\"\n                    name=\"setType\"\n                    value={setType}\n                    defaultChecked={setType === this.state.searchBySetType}\n                    onClick={(e) => this.setState({ searchBySetType: e.target.value })}\n                />\n                <label\n                    htmlFor={setType + 'setType'}\n                    className=\"col-12 mb-1 set-filter-button radio-btn personnal-checkbox green-check filter-modal\">\n                    {setType}\n                </label>\n            </div>\n        )\n    };\n\n    getBonusTypes = (bonusType) => {\n        return (\n            <Fragment key={bonusType}>\n                <input\n                    id={bonusType + 'bonusType'}\n                    type=\"radio\"\n                    name=\"bonusType\"\n                    value={bonusType}\n                    defaultChecked={bonusType === this.state.filterByBonusType}\n                    onClick={(e) => this.setState({ filterByBonusType: e.target.value })}\n                />\n                <label\n                    htmlFor={bonusType + 'bonusType'}\n                    className=\"col-12 mb-1 set-filter-button radio-btn personnal-checkbox green-check filter-modal\">\n                    {bonusType}\n                </label>\n            </Fragment>\n        )\n    };\n\n    optimiserSetSetsLevelsFilter = (e) => {\n        const eValueSplited = e.target.value.split(',');\n        const setLevel = eValueSplited[0];\n        const setTier = eValueSplited[1];\n\n        return setLevel === '6' ? this.setState({ optimiserSixStarsLevel: setTier }) :\n            setLevel === '7' ? this.setState({ optimiserSevenStarsLevel: setTier }) :\n                setLevel === '8' ? this.setState({ optimiserEightStarsLevel: setTier }) :\n                    setLevel === '9' ? this.setState({ optimiserNineStarsLevel: setTier }) : null;\n    };\n\n    getSetLevels = (artLevel) => {\n        const setLevelBoxes = [];\n\n        const setSetsLevel = artLevel === 6 ? 3 : \n            artLevel === 7 ? 3 :\n                artLevel === 8 ? 2 :\n                    artLevel === 9 ? 1 : 0;\n        const setTier = artLevel === 6 ? this.state.optimiserSixStarsLevel :\n            artLevel === 7 ? this.state.optimiserSevenStarsLevel :\n                artLevel === 8 ? this.state.optimiserEightStarsLevel :\n                    artLevel === 9 ? this.state.optimiserNineStarsLevel : 0;\n\n        for (let i = 0; i <= setSetsLevel; i++) {\n            const setLevel = this.state.setsLevels[i];\n            const newLine = i === setSetsLevel ? (<br />) : null;\n\n            setLevelBoxes.push(\n                <Fragment key={artLevel + i}>\n                    <input\n                        id={setLevel + artLevel + i}\n                        type=\"radio\"\n                        name={artLevel}\n                        value={[artLevel, setLevel]}\n                        defaultChecked={setTier === setLevel}\n                        onClick={(e) => this.optimiserSetSetsLevelsFilter(e)}\n                    />\n                    <label htmlFor={setLevel + artLevel + i}\n                        className={`${setSetsLevel === 3 ? 'col-3' : setSetsLevel === 2 ? 'col-4' : setSetsLevel === 1 ? 'col-6' : 'col'} mb-1 set-filter-button radio-btn personnal-checkbox green-check filter-modal`}>\n                        {setLevel} {artLevel}*\n                    </label>\n                    {newLine}\n                </Fragment>\n            );\n        }\n\n        return setLevelBoxes\n    };\n\n    artsPerSetButtons = (i) => {\n        return (\n            <Fragment key={i + 'total arts'}>\n                <input\n                    id={i + 'total arts'}\n                    type=\"radio\"\n                    name={'totalArtsPerSet'}\n                    value={i}\n                    defaultChecked={i.toString() === this.state.filterByTotalArtsNumber}\n                    onClick={(e) => this.setState({ filterByTotalArtsNumber: e.target.value })}\n                />\n                <label htmlFor={i + 'total arts'}\n                    className={`col mb-2 set-filter-button radio-btn personnal-checkbox green-check filter-modal`}>\n                    {i}\n                </label>\n            </Fragment>\n        )\n    };\n\n    getArtsPerSet = () => {\n        const boxes = [];\n\n        for (let i = 1; i <= this.state.maxArtsPerSet; i++) {\n            boxes.push(this.artsPerSetButtons(i))\n        }\n\n        // All button\n        boxes.push(this.artsPerSetButtons('All'));\n\n        return boxes;\n    };\n\n    enhancementMode = (type) => {\n        return (\n            <Fragment key={type + 'enhance'}>\n                <input\n                    id={type + 'enhance'}\n                    type=\"radio\"\n                    name='enhancementMode'\n                    value={type}\n                    defaultChecked={type === this.state.enhancementMode}\n                    onClick={(e) => this.setState({ enhancementMode: e.target.value })}\n                />\n                <label\n                    htmlFor={type + 'enhance'}\n                    className={`col mb-1 set-filter-button radio-btn personnal-checkbox green-check filter-modal ${type === 'Manual' ? 'mr-2' : ''}`}>\n                    {type}\n                </label>\n            </Fragment>\n        )\n    };\n\n    changeDefaultElvl = (event) => {\n        const GSState = this.state.gameSpeedBonuses;\n        const MedalsState = this.state.bonusMedals;\n\n        const elvl = parseInt(event.target.value, 10);\n        localStorage.setItem('enhanceLevel', elvl);\n        this.setState({ enhanceLevel: elvl });\n\n\n        if (this.state.enhancementMode === 'All') {\n            // Updating all sets in data\n            this.state.data.map(sets => sets.map(set => {\n                return set.enhance_level = this.adaptElvl(set, elvl)\n            }));\n\n            // Updating all sets in selected list\n            this.state.selectedList.map((set, index) => {\n                set.enhance_level = this.adaptElvl(set, elvl);\n\n                // Check if a set comes from autobuilder and modify it\n                if (set.hasOwnProperty('calculatedBonusMedals') && set.hasOwnProperty('calculatedBonusGS')) {\n                    set.calculatedBonusMedals = calculateMedalsFromEnhancement(set.bonusMedals, set.enhance_level);\n                    set.calculatedBonusGS = calculateGSFromEnhancement(\n                        set.bonusGS,\n                        set.artifact1.art_level,\n                        set.setLevel,\n                        set.enhance_level,\n                        set.setType,\n                    );\n                }\n\n                // Updating totals\n                MedalsState[index] = !isNaN(set.calculatedBonusMedals) ?\n                    set.calculatedBonusMedals : calculateMedalsFromEnhancement(this.findBonus(set, /Increase Additional Medals Obtained/), set.enhance_level);\n                GSState[index] = !isNaN(set.calculatedBonusGS) ?\n                    set.calculatedBonusGS : calculateGSFromEnhancement(\n                        this.findBonus(set, /Game Speed/),\n                        set.artifact1.art_level,\n                        set.setLevel,\n                        set.enhance_level,\n                        set.setType,\n                    );\n\n                this.setState({\n                    bonusMedals: MedalsState,\n                    gameSpeedBonuses: GSState,\n                });\n                return set\n            });\n        }\n    };\n\n    changeSetEnhanceLevel = (event, globalArray) => {\n        const elvl = parseInt(event, 10);\n        // Depending if autobuilder or not, arrays are not composed the same way\n        // True = [set, set...]\n        // False [[set, set...], [set, set...]]\n        if (!globalArray[0][0]) {\n            return globalArray.map(set => {\n                this.modifySelectedSet(this.state.selectedList, set, elvl);\n                return set.enhance_level = this.adaptElvl(set, elvl);\n            });\n        } else {\n            return globalArray.map(sets =>\n                sets.map(set => {\n                    this.modifySelectedSet(this.state.selectedList, set, elvl);\n                    return set.enhance_level = this.adaptElvl(set, elvl);\n                })\n            );\n        }\n    };\n\n    adaptElvl = (set, elvl) => {\n        const artLevel = set.artifact1.art_level;\n\n        if (elvl === 5) {\n            return artLevel === '9*' ? elvl :\n                artLevel === '8*' ? elvl - 1 :\n                    artLevel === '7*' ? elvl - 2 : elvl - 3;\n        }\n        if (elvl === 4) {\n            return ['8*', '9*'].includes(artLevel) ? elvl :\n                artLevel === '7*' ? elvl - 1 : elvl - 2;\n        }\n        if (elvl === 3) {\n            return ['7*', '8*', '9*'].includes(artLevel) ? elvl : elvl - 1;\n        }\n        return elvl;\n    };\n\n    modifySelectedSet = (list, set, elvl) => {\n        let indexOf = -1;\n        list.map((setX, index) => {\n            return setX.set_name === set.set_name && setX.setLevel === set.setLevel ? indexOf = index : null;\n        });\n        if (indexOf !== -1) {\n            list[indexOf].enhance_level = this.adaptElvl(list[indexOf], elvl);\n            this.setState({ selectedList: list })\n        }\n    };\n\n    enhancementLevels = (elvl) => {\n        return this.state.enhancementMode === 'All' ? (\n            <Fragment key={elvl + 'enhance'}>\n                <input\n                    id={elvl + 'enhance'}\n                    type=\"radio\"\n                    name=\"enhanceLevel\"\n                    value={elvl}\n                    defaultChecked={elvl === this.state.enhanceLevel}\n                    onClick={(e) => this.changeDefaultElvl(e)}\n                />\n                <label\n                    htmlFor={elvl + 'enhance'}\n                    className=\"col mb-1 set-filter-button radio-btn personnal-checkbox green-check filter-modal\">\n                    +{elvl}\n                </label>\n            </Fragment>\n        ) : null;\n    };\n\n    artsNumber = (set, sets) => {\n        const elvl = set.enhance_level ? set.enhance_level : 0;\n        return (\n            <div className=\"col p-0 ml-1\" key={set.set_tech_name}>\n                <input\n                    id={set.set_name.replace(/ \\(\\dp\\)/, '') + set.set_tech_name + set.setLevel}\n                    onClick={this.state.selectedList.includes(set) ?\n                        null : () => this.handleList(set, 'select', elvl, sets)}\n                    type=\"radio\"\n                    name={set.set_name.replace(/ \\(\\dp\\)/, '')}\n                    value={set.set_name}\n                    defaultChecked={this.state.selectedList.some(setx =>\n                        setx.set_name === set.set_name.replace(/ \\(\\dp\\)/, '') &&\n                        setx.set_arts_number === set.set_arts_number &&\n                        setx.setLevel === set.setLevel\n                    )}\n                >\n                </input>\n                <label\n                    htmlFor={set.set_name.replace(/ \\(\\dp\\)/, '') + set.set_tech_name + set.setLevel}\n                    className=\"text-center text-color personnal-checkbox green-check w-100\">\n                    {set.set_arts_number}\n                </label>\n            </div>\n        )\n    };\n\n    startBuild = () => {\n        const nbArtsWanted = this.state.optimiserNbArts;\n        let getResults = knapsack(\n            this.state.data,\n            nbArtsWanted,\n            this.state.optimiserMaxGS,\n            1250,\n            this.findBonus,\n            this.state.excludedFromOptimiser,\n            this.state.artsLevelsOptimized,\n            this.state.optimiserSixStarsLevel,\n            this.state.optimiserSevenStarsLevel,\n            this.state.optimiserEightStarsLevel,\n            this.state.optimiserNineStarsLevel,\n        );\n\n        getResults = getResults.sort((r1, r2) =>\n            r1.totalArts >= r2.totalArts && r1.gameSpeed * 1.1 >= r2.gameSpeed && r1.medalsBonus * 1.05 >= r2.medalsBonus ? -1 : 1\n        );\n\n        let solutionMessage = (\n            <div key=\"message\" className=\"col-12 white-text mt-1 mb-2\">\n                {\n                    nbArtsWanted > 1 && getResults[0].totalArts > 0 ?\n                        (<Fragment>\n                            <span>Solution(s) found</span>\n                            <br />\n                            <span>Don't forget to adapt for race optimisation if needed</span>\n                        </Fragment>\n                        ) :\n                        'No solution found'\n                }\n            </div>\n        );\n\n        this.setState({ optimisedSets: [solutionMessage], optimisedResultSelectedIndex: 1 });\n\n        getResults.map(set => {\n            return this.setState(prevState => ({ optimisedSets: [...prevState.optimisedSets, set] }));\n        });\n\n        return getResults[0] && getResults[0].sets.length > 0 ? this.pushInStates(getResults[0]) : this.resetSummaryState();\n    };\n\n    pushInStates = (setsArray, index) => {\n        this.resetSummaryState();\n\n        return setsArray.sets.map(set => {\n            return this.setState(prevState => ({\n                selectedList: [...prevState.selectedList, set],\n                totalNumberOfArts: [...prevState.totalNumberOfArts, set.set_arts_number],\n                gameSpeedBonuses: [...prevState.gameSpeedBonuses, set.calculatedBonusGS],\n                bonusMedals: [...prevState.bonusMedals, set.calculatedBonusMedals],\n                optimisedResultSelectedIndex: index ? parseInt(index, 10) : 1,\n            })\n            );\n        });\n    };\n\n    getArrayResult = (e) => {\n        const index = e.target.value;\n        return this.pushInStates(this.state.optimisedSets[index], index)\n    };\n\n    closeScreenModal = () => {\n        this.setState({ showScreenModal: false, canvas: null })\n    };\n\n    render() {\n        return (\n            <div className=\"container-fluid text-center\">\n                {this.state.loading ? (\n                    <LoadingScreen\n                        // visitorCount={this.state.visitorCount}\n                        offline={this.state.offline}\n                    />\n                ) : null}\n                {this.state.showScreenModal ? (\n                    <ScreenshotModal\n                        handler={this.closeScreenModal}\n                        canvas={this.state.canvas}\n                        canvasMobile={this.state.canvasMobile}\n                    />\n                ) : null}\n                <NavBar\n                    swapManualToAutomaticBuilder={() => this.setState({ optimiser: !this.state.optimiser })}\n                    triggerScreenshot={this.triggerScreenshot}\n                    searchBySetName={(e) => this.setState({ searchBySetName: e.target.value.replace(/[^a-zA-Z0-9 ]/g, '') })}\n                    setFiltering={this.state.searchBySetType !== 'All' || this.state.filterByBonusType !== 'All'}\n                    setsTypes={this.state.setTypes.map(this.getSetsTypes)}\n                    bonusTypes={this.state.bonusTypes.map(this.getBonusTypes)}\n                    optimiser={this.state.optimiser}\n                    setsLevels={this.state.artsLevels.map(this.getSetLevels)}\n                    resetFilters={() => this.setState({ searchBySetType: 'All', filterByBonusType: 'All' })}\n                    listLength={this.state.selectedList.length}\n                    resetList={() => this.resetSummaryState()}\n                    enhancementMode={this.state.enhancementModes.map(this.enhancementMode)}\n                    enhancementLevels={this.state.enhancementLevels.map(this.enhancementLevels)}\n                    connected={this.state.connected}\n                    totalArtsPerSet={this.getArtsPerSet()}\n                    setsSorting={this.setsSortingButtons()}\n                />\n                <StatsSummaryAndArtsBox\n                    totalNumberOfArts={this.sum(this.state.totalNumberOfArts)}\n                    gameSpeedBonuses={this.sum(this.state.gameSpeedBonuses)}\n                    bonusMedals={this.sum(this.state.bonusMedals)}\n                    selectedList={this.state.selectedList.map(this.getSelection)}\n                    setsData={this.state.optimiser ? this.state.data.map(this.getOptimizedSets) : this.state.data.map(this.getSets)}\n                    offline={this.state.offline}\n                    optimiser={this.state.optimiser}\n                    optimiserNbArts={(e) => this.setState({\n                        optimiserNbArts: parseInt(e.target.value, 10) ?\n                            parseInt(e.target.value, 10) : 0\n                    })}\n                    optimiserMaxGS={(e) => this.setState({\n                        optimiserMaxGS: parseInt(e.target.value, 10) ?\n                            parseInt(e.target.value, 10) : 0\n                    })}\n                    startBuild={() => this.startBuild()}\n                    wantedArts={this.state.optimiserNbArts}\n                    maxGS={this.state.optimiserMaxGS}\n                    getOptimisedResults={this.state.optimisedSets}\n                    getArrayResult={(e) => this.getArrayResult(e)}\n                    optimisedResultSelectedIndex={this.state.optimisedResultSelectedIndex}\n                    connected={this.state.connected}\n                />\n            </div>\n        );\n    }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n              localStorage.setItem('showLastPatchNote', true)\n              installingWorker.postMessage('skipWaiting');\n              // reload once when the new Service Worker starts activating\n              var refreshing;\n              navigator.serviceWorker.addEventListener('controllerchange',\n                function () {\n                  if (refreshing) return;\n                  refreshing = true;\n                  window.location.reload();\n                }\n              );\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport './styles/randomBg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}